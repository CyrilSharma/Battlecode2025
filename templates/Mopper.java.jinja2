{% import 'helpers/Utils.java.jinja2' as utils %}

package current;
import battlecode.common.*;

public class Mopper {
    public static RobotController rc;
    public static MapLocation buildTower = null;
    public static MapLocation myloc;
    public static int paintCapacity = UnitType.SOLDIER.paintCapacity;
    public static int myPaint;
    public static MapLocation exploreTarget;
    public static MapInfo[] near;
    public static MapLocation ruinLoc;
    public static boolean[][] resourcePat = null;
    public static boolean shouldGoHome = false;

    public static void init(RobotController rc) {
        Mopper.rc = rc;
        resourcePat = rc.getResourcePattern();
    }

    public static boolean canMop(MapInfo mi) throws GameActionException {
        return (!mi.getPaint().isAlly() && mi.getPaint() != PaintType.EMPTY);
    }

    public static void run() throws GameActionException {
        init();
        runTurn();
        postTurn();
    }

    public static void init() throws GameActionException {
        myloc = rc.getLocation();
        myPaint = rc.getPaint();
        near = rc.senseNearbyMapInfos();
        RefuelManager.setHome();
        boolean lowHealth = (myPaint <= (paintCapacity >> 2));
        if (lowHealth != shouldGoHome) {
            shouldGoHome = lowHealth;
            RefuelManager.reset();
        }
    }

    public static void runTurn() throws GameActionException {
        if (shouldGoHome) { 
            rc.setIndicatorString("Refueling");
            RefuelManager.refuel();
            return;
        }
        else if (Attack.shouldMopperMicro()) {
            rc.setIndicatorString("Mopping");
            Attack.mopperAttackMicro();
            return;
        }
        else if (rc.getNumberTowers() < 25){
            MapLocation buildTower = TowerBuild.getRuin(near);
            if (buildTower != null) {
                TowerBuild.makeTower(buildTower);
            }
        }
        
        Explore.exploreOnPaint(near);
    }

    public static void postTurn() throws GameActionException {
        MapLocation nloc;
        MapInfo mi;
        {% for direction in directions %}
        nloc = myloc.add({{direction}});
        mi = rc.senseMapInfo(nloc);
        if (rc.canAttack(nloc) && canMop(mi)) rc.attack(nloc);
        {% endfor %}
    }
}