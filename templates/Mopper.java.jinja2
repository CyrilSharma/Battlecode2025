{% import 'helpers/Utils.java.jinja2' as utils %}

package current;
import battlecode.common.*;

public class Mopper {
    public static RobotController rc;
    public static MapLocation home = null;
    public static MapLocation buildTower = null;
    public static MapLocation myloc;
    public static int paintCapacity = UnitType.SOLDIER.paintCapacity;
    public static int myPaint;
    public static MapLocation exploreTarget;
    public static MapInfo[] near;
    public static MapLocation ruinLoc;
    public static MapLocation removing = null;
    public static int removeMask = 0;
    public static boolean[][] resourcePat = null;

    public static void init(RobotController rc) {
        Mopper.rc = rc;
    }

    public static boolean isTower(UnitType u) {
        return (u == UnitType.LEVEL_ONE_PAINT_TOWER ||
                u == UnitType.LEVEL_ONE_MONEY_TOWER ||
                u == UnitType.LEVEL_ONE_DEFENSE_TOWER ||
                u == UnitType.LEVEL_TWO_PAINT_TOWER ||
                u == UnitType.LEVEL_TWO_MONEY_TOWER ||
                u == UnitType.LEVEL_TWO_DEFENSE_TOWER ||
                u == UnitType.LEVEL_THREE_PAINT_TOWER ||
                u == UnitType.LEVEL_THREE_MONEY_TOWER ||
                u == UnitType.LEVEL_THREE_DEFENSE_TOWER);
    }

    public static boolean canMop(MapInfo mi) throws GameActionException {
        return (!mi.getPaint().isAlly() && mi.getPaint() != PaintType.EMPTY);
    }

    public static void setHome() throws GameActionException {
        if (home != null) {
            //if we can see it, it is not a paint tower, and it is empty - set to null
            if (rc.canSenseLocation(home)) {
                RobotInfo r = rc.senseRobotAtLocation(home);
                if (r == null || r.paintAmount == 0) {
                    home = null;
                }
            }

        }
        RobotInfo[] robots = rc.senseNearbyRobots();
        RobotInfo robot;
        loop: {
        {% for i in range(70) %}
            if ({{i}} >= robots.length) break loop;
            robot = robots[{{i}}];
            if (robot.team == rc.getTeam() && robot.paintAmount > 0 && isTower(robot.type)) {
                home = robot.location;
                break loop;
            }
        {% endfor %}
        }
    }

    public static void refuel() throws GameActionException {
        Pathing.pathTo(home);
        if (rc.canSenseLocation(home)) {
            RobotInfo r = rc.senseRobotAtLocation(home);
            int amt = Math.max(myPaint - paintCapacity, -r.getPaintAmount());
            if (rc.canTransferPaint(home, amt)) {
                rc.transferPaint(home, amt);
            }
        }
    }

    public static MapLocation seeRuin() throws GameActionException {
        for (int i = near.length; --i >= 0; ) {
            if (near[i].hasRuin()) {
                RobotInfo r = rc.senseRobotAtLocation(near[i].getMapLocation());
                if (r == null) {
                    return near[i].getMapLocation();
                }
            }
        }
        return null;
    }

    public static UnitType getTowerToBuild() throws GameActionException {
        if (rc.getNumberTowers() < 3) return UnitType.LEVEL_ONE_MONEY_TOWER;
        return UnitType.LEVEL_ONE_PAINT_TOWER;
    }

    public static void makeTower() throws GameActionException {
        assert(buildTower != null);

        UnitType t = getTowerToBuild();
        MapLocation check = buildTower.add(Direction.NORTH);
        if (rc.canSenseLocation(check) && rc.senseMapInfo(check).getMark() == PaintType.EMPTY && rc.canMarkTowerPattern(t, buildTower)){
            rc.markTowerPattern(t, buildTower);
        }

        MapLocation goal = null;
        int bestDist = 1000000000;

        for (int i = 3; --i >= -2; ){
            for (int j = 3; --j >= -2; ){
                if (i == 0 && j == 0) continue;
                MapLocation tmp = new MapLocation(buildTower.x + i, buildTower.y + j);
                if (rc.canSenseLocation(tmp)) {
                    MapInfo mi = rc.senseMapInfo(tmp);
                    if (mi.getMark() != mi.getPaint() && mi.getMark() != PaintType.EMPTY && canMop(mi)) {
                        int d = rc.getLocation().distanceSquaredTo(tmp);
                        if (d < bestDist) {
                            bestDist = d;
                            goal = tmp;
                        }
                    }
                }
            }
        }
        if (goal != null) {
            if (rc.canAttack(goal)) {
                rc.attack(goal);
            }
            else {
                Pathing.pathTo(goal);
            }
        }
        else {
            if (rc.canCompleteTowerPattern(UnitType.LEVEL_ONE_PAINT_TOWER, buildTower)){
                rc.completeTowerPattern(UnitType.LEVEL_ONE_PAINT_TOWER, buildTower);
                removing = buildTower;
                removeMask = (1 << 25) - 1;
            }
            if (rc.canCompleteTowerPattern(UnitType.LEVEL_ONE_MONEY_TOWER, buildTower)){
                rc.completeTowerPattern(UnitType.LEVEL_ONE_MONEY_TOWER, buildTower);
                removing = buildTower;
                removeMask = (1 << 25) - 1;
            }
            Pathing.pathTo(buildTower);
        }
    }

    public static boolean isBuilt(MapLocation ruinLoc) throws GameActionException {
        if (rc.canSenseLocation(ruinLoc)) {
            RobotInfo r = rc.senseRobotAtLocation(ruinLoc);
            return (r != null);
        }
        return false;
    }

    public static boolean mopSquares() throws GameActionException {
        if (rc.getPaint() < 20) return false;
        MapLocation goal = null;
        MapLocation secondGoal = null;
        int bestDist = 1000000000;
        int secondDist = 1000000000;
        for (int i = near.length; --i >= 0; ) {
            int d = rc.getLocation().distanceSquaredTo(near[i].getMapLocation());
            if (near[i].getMark() != PaintType.EMPTY && near[i].getMark() != near[i].getPaint() && canMop(near[i])) {
                if (d < bestDist) {
                    bestDist = d;
                    goal = near[i].getMapLocation();
                }
            }
            if (canMop(near[i])) {
                if (d < secondDist) {
                    secondGoal = near[i].getMapLocation();
                    secondDist = d;
                }
            }
        }
        if (goal != null) {
            if (rc.canAttack(goal)) {
                rc.attack(goal);
            }
            else {
                Pathing.pathTo(goal);
            }
            return true;
        }
        else if (secondGoal != null) {
            if (rc.canAttack(secondGoal)) {
                rc.attack(secondGoal);
            }
            else {
                Pathing.pathTo(secondGoal);
            }
            return true;
        }
        return false;
    }

    public static boolean seeIncompleteRuin(MapLocation ruin) throws GameActionException {
        for (int i = 3; --i >= -2; ){
            for (int j = 3; --j >= -2; ){
                if (i == 0 && j == 0) continue;
                MapLocation tmp = new MapLocation(ruin.x + i, ruin.y + j);
                if (rc.canSenseLocation(tmp)) {
                    MapInfo mi = rc.senseMapInfo(tmp);
                    if ((mi.getMark() != mi.getPaint() || mi.getMark() == PaintType.EMPTY) && canMop(mi)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static void removePattern() throws GameActionException {
        MapLocation goal = removing;
        for (int i = 3; --i >= -2; ){
            for (int j = 3; --j >= -2; ){
                if (i == 0 && j == 0) continue;
                MapLocation tmp = new MapLocation(removing.x + i, removing.y + j);
                int v = (i + 2) * 5 + (j + 2);
                if ((removeMask & (1 << v)) != 0) {
                    if (rc.canRemoveMark(tmp)) {
                        removeMask ^= (1 << v);
                        rc.removeMark(tmp);
                    }
                    else if (v != 12) {
                        goal = tmp;
                    }
                }
            }
        }
        if (removeMask == (1 << 12)) {
            removing = null;
            removeMask = 0;
        }
        else {
            Pathing.pathTo(goal);
        }
    }

    public static void run() throws GameActionException {
        near = rc.senseNearbyMapInfos();
        // We do this every turn in the event the tower got destroyed when the unit was created.
        setHome();
        if (resourcePat == null) resourcePat = rc.getResourcePattern();

        myloc = rc.getLocation();
        myPaint = rc.getPaint();

        if (myPaint <= (paintCapacity >> 2)) {
            if (home != null) {
                refuel();
            }
            else {
                Explore.exploreOnPaint(near);
            }
            return;
        } else if (Attack.shouldMopperMicro()) {
            rc.setIndicatorString("Mopping");
            Attack.mopperAttackMicro();
        } else if (rc.getNumberTowers() < 25 && removing == null){
            buildTower = null;
            ruinLoc = seeRuin();
            if (ruinLoc != null) {
                boolean incRuin = seeIncompleteRuin(ruinLoc);

                if (incRuin){
                    buildTower = ruinLoc;
                }

                if (buildTower != null) {
                    makeTower();
                }
            }
        }
        
        if (removing != null) {
            removePattern();
            return;
        }

        if(!mopSquares()) Explore.exploreOnPaint(near);
    }
}