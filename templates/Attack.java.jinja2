package current;
import battlecode.common.*;

{% set dirY = [1, 1, 0, -1, -1, -1,  0,  1, 0] %}
{% set dirX = [0, 1, 1,  1,  0, -1, -1, -1, 0] %}

public class Attack {
    public static MapLocation myloc;
    public static RobotController rc;

    {% set copiedAttributes = ['actionRadiusSquared', 'paintCapacity', 'actionCooldown', 'attackStrength', 'aoeAttackStrength']%}
    {% for unit in ['soldier', 'splasher'] -%}
    {% for attribute in copiedAttributes -%}
    public static int {{unit}}{{capitalizeFirstLetter(attribute)}};
    {% endfor -%}
    {% endfor -%}

    public static void init(RobotController rc) {
        Attack.rc = rc;
        {% for unit in ['soldier', 'splasher'] -%}
        {% for attribute in copiedAttributes -%}
        {{unit}}{{capitalizeFirstLetter(attribute)}} = UnitType.{{unit.upper()}}.{{attribute}};
        {% endfor -%}
        {% endfor %}
        splasherActionRadiusSquared = 9;
    }
    
    public static void initTurn() throws GameActionException {
        myloc = rc.getLocation();
        boolean shouldComputeReachSoon = false;
        for (int i = Globals.enemies.length; --i >= 0; ) {
            RobotInfo enemy = Globals.enemies[i];
            switch (enemy.type) {
                case SOLDIER, MOPPER, SPLASHER: continue;
                default:
                    shouldComputeReachSoon = true;
                    break;
            }
        }
        if (shouldComputeReachSoon) computeReachSoonMask();
    }

    {% set VISION_WIDTH = 9 %}
    {% set MIDDLE_OFFSET = intDiv(VISION_WIDTH, 2) %}
    {% set (MASK0, MASK1) = radialMask(rsqr=20, cx=MIDDLE_OFFSET, cy=MIDDLE_OFFSET) %}
    {% set (MASK_POS, _) = radialMask(rsqr=0, cx=MIDDLE_OFFSET, cy=MIDDLE_OFFSET) %}

    // You can get away with looking at (and BFSing) single mask...
    public static long initialMask = 0x{{ '{:08X}'.format(MASK_POS) }}L;;
    public static long reachSoonMask = initialMask;
    public static long loverflow = 0x7fbfdfeff7fbfdfeL;
    public static long roverflow = 0x3fdfeff7fbfdfeffL;
    public static long mask0 = 0x{{ '{:08X}'.format(MASK0) }}L;
    public static long mask1 = 0x{{ '{:08X}'.format(MASK1) }}L;
    public static void computeReachSoonMask() throws GameActionException {
        reachSoonMask = initialMask;
        
        // Unfortunate that we do this twice...
        long passible0 = (~(
              ((long)(TileLoader.local_wall6 | TileLoader.local_ruin6) << {{6 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall5 | TileLoader.local_ruin5) << {{5 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall4 | TileLoader.local_ruin4) << {{4 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall3 | TileLoader.local_ruin3) << {{3 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall2 | TileLoader.local_ruin2) << {{2 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall1 | TileLoader.local_ruin1) << {{VISION_WIDTH}})
            | ((long)(TileLoader.local_wall0 | TileLoader.local_ruin0))
        )) & mask0;

        long passible1 = (~(
              ((long)(TileLoader.local_wall8) << {{VISION_WIDTH}})
            | ((long)(TileLoader.local_wall7))
        )) & mask1;

        // Run a BFS
        long mask0AndPassible = mask0 & passible0;
        long mask1AndPassible = mask1 & passible1;
        bfsLoop: {
            {% for iter in range(2) %}
            reachSoonMask = (reachSoonMask | ((reachSoonMask << 1) & loverflow) | ((reachSoonMask >>> 1) & roverflow));
            reachSoonMask = (reachSoonMask | (reachSoonMask << {{VISION_WIDTH}}) | (reachSoonMask >>> {{VISION_WIDTH}})) & mask0AndPassible;
            {% endfor %}
        }
    }

    
    public static boolean canHitSoon(MapLocation m) {
        int dy = (m.y - (myloc.y - {{ MIDDLE_OFFSET }}));
        int dx = (m.x - (myloc.x - {{ MIDDLE_OFFSET }}));
        switch (dy) {
            {% for y in range(9) %}
            case ({{ y }}) -> {
                switch (dx) {
                    {% for x in range(9) %}
                    case ({{ x }}) -> {{ '/* (' + x|string + ', ' + y|string + ') */' }} {
                        {% set (action0, _) = radialMask(rsqr=9, cx=x, cy=y) %}
                        return (0x{{ '{:08X}'.format(action0) }}L & reachSoonMask) != 0;
                    }
                    {% endfor %}
                    default -> {
                        return false;
                    }
                }
            }
            {% endfor %}
            default -> {
                return false;
            }
        }
    }


    public static boolean shouldSoldierMicro() throws GameActionException {
        for (int i = Globals.enemies.length; --i >= 0; ) {
            RobotInfo enemy = Globals.enemies[i];
            switch (enemy.type) {
                case SOLDIER, MOPPER, SPLASHER: continue;
                default: if (canHitSoon(enemy.location)) return true;
            }
        }
        return false;
    }

    public static void soldierTryAttack() throws GameActionException {
        for (int i = Globals.enemies.length; --i >= 0;) {
            RobotInfo enemy = Globals.enemies[i];
            switch (enemy.type) {
                case SOLDIER, SPLASHER, MOPPER: continue;
                default: {
                    MapLocation loc = enemy.location;
                    if (rc.canAttack(loc)) {
                        rc.attack(loc);
                        return;
                    }
                }
            }
        }
    }

    public static boolean shouldSplasherMicro() throws GameActionException {
        // Only activate micro if you can attack a tower.
        for (int i = Globals.enemies.length; --i >= 0; ) {
            RobotInfo enemy = Globals.enemies[i];
            switch (enemy.type) {
                case SOLDIER, MOPPER, SPLASHER: continue;
                default: if (canHitSoon(enemy.location)) return true;
            }
        }
        return false;
    }

    public static void splasherTryAttack() throws GameActionException {
        if (!rc.isActionReady() || rc.getPaint() < (UnitType.SPLASHER.paintCapacity >> 2)) return;
        MapLocation myloc = rc.getLocation();
        int x = myloc.x, y = myloc.y;
        MapLocation bestLoc = null;
        int count = 0, bestCount = -1;

        {% for i in range(-3, 4, 1) %}
        {% for j in range(-3, 4, 1) %}
        MapLocation mloc{{i+3}}{{j+3}} = new MapLocation(x + {{ i }}, y + {{ j }});
        boolean hasTower{{i+3}}{{j+3}} = false;
        if (rc.canSenseLocation(mloc{{i+3}}{{j+3}})) {
            RobotInfo r{{i+3}}{{j+3}} = rc.senseRobotAtLocation(mloc{{i+3}}{{j+3}});
            if ( r{{i+3}}{{j+3}} != null &&  r{{i+3}}{{j+3}}.team != rc.getTeam() && Globals.isTower(r{{i+3}}{{j+3}}.type)) {
                hasTower{{i+3}}{{j+3}} = true;
            }
        }
        {% endfor %}
        {% endfor %}

        {% for i in range(-2, 3, 1) %}
        {% for j in range(-2, 3, 1) %}
        if (rc.canAttack(mloc{{i+3}}{{j+3}})) {
            count = 0;
            {% for k in range(-1, 2, 1) %}
            {% for l in range(-1, 2, 1) %} 
            if (hasTower{{i+k+3}}{{j+l+3}}) ++count;
            {% endfor %}
            {% endfor %}
            if (count > bestCount) {
                bestLoc = mloc{{i+3}}{{j+3}};
                bestCount = count;
            }
        }
        {% endfor %}
        {% endfor %}

        if (bestCount >= 1) {
            rc.attack(bestLoc);
        }
    }
    
    {% macro attackMicro(type) -%}
    public static void {{type}}AttackMicro() throws GameActionException {
        {{type}}TryAttack();
        MapLocation myloc = rc.getLocation();
        SquareManager.computePaintPenalties();
        {% for i in range(9) -%}
        {{ initTarget(type, i) | indent(4) }}
        {%- endfor -%}

        boolean friendNearby = false;
        for (RobotInfo r: Globals.friends) {
            if (r.type == UnitType.SOLDIER) {
                friendNearby = true;
                break;
            }
        }
        boolean shouldWaitForFriend = (friendNearby && (rc.getRoundNum() % 2 == 0));

        // Use GameConstant.
        boolean actionReady = (rc.isActionReady() && (rc.getPaint() >= 5) && !shouldWaitForFriend);
        int cooldownTurns = rc.getActionCooldownTurns();
        {# {% debug('actionReady', 'cooldownTurns') %} #}
        for (int i = Globals.friends.length; --i >= 0; ) {
            RobotInfo robot = Globals.friends[i];
            {% for i in range(9) -%}
            {{ addAlly(type, i) | indent(8) -}}
            {% endfor %}
        }

        for (int i = Globals.enemies.length; --i >= 0; ) {
            RobotInfo robot = Globals.enemies[i];
            {% for i in range(9) -%}
            {{ addEnemy(type, i) | indent(8) -}}
            {% endfor %}
        }

        {# {% for i in range(0, 9) -%}
        {% set dir = shortDirections[i] %}
        {% debug('minDistToEnemy_' ~ dir, 'targetLoc_' ~ dir ~ '.x', 'canMove_' ~ dir,
                 'targetLoc_' ~ dir ~ '.y', 'penalty_' ~ dir, 'healthDmgAttackRange_' ~ dir,
                 'myHealthDmg_' ~ dir, 'towerHealth_' ~ dir, 'canBeHit_' ~ dir, 'canLandHit_' ~ dir) %}
        {% endfor %} #}

        boolean bestWins = false;
        Direction bestDir = {{ directions[0] }};
        {{ initTargetWithSuffix(type, i=0, suffix='best') | indent(4) }}
        
        {{ copy(type, 'best', shortDirections[0]) | indent(4) -}}
        {% for i in range(1, 9) -%}
        {{ chooseBest(type, i) | indent(4) }}
        {% endfor %}

        {# {% set dir = 'best' %}
        {% debug('minDistToEnemy_' ~ dir, 'targetLoc_' ~ dir ~ '.x', 'canMove_' ~ dir,
                 'targetLoc_' ~ dir ~ '.y', 'penalty_' ~ dir, 'healthDmgAttackRange_' ~ dir,
                 'myHealthDmg_' ~ dir, 'towerHealth_' ~ dir, 'canBeHit_' ~ dir, 'canLandHit_' ~ dir) %}
        System.out.println("Chose: " + bestDir);
        System.out.println("\n"); #}

        if (rc.canMove(bestDir)) {
            Pathing.move(bestDir);
        }
        {{type}}TryAttack();
    }
    {% endmacro -%}

    /*------------------ CHOOSE BEST --------------------*/
    {%- macro chooseBest(type, i) -%}
    {%- set best = 'best' -%}
    {%- set dir = shortDirections[i] -%}
    {%- set label = 'chooseBest' ~ _ ~ dir %}
    bestWins = canMove_{{best}};
    {{label}}: {
        if (!canMove_{{dir}} || !canMove_{{best}}) break {{label}};

        // Choose the square where I deal the most net damage.
        double bestHealthDmgDiff = healthDmgAttackRange_{{best}} - myHealthDmg_{{best}};
        double otherHealthDmgDiff = healthDmgAttackRange_{{dir}} - myHealthDmg_{{dir}};
        if (bestHealthDmgDiff != otherHealthDmgDiff) {
            bestWins = (bestHealthDmgDiff < otherHealthDmgDiff);
            break {{label}};
        }

        if (actionReady) {
            // If I can attack at either square, prefer the one which lets me attack a low health tower.
            if (canLandHit_{{best}} && canLandHit_{{dir}}) {
                if (towerHealth_{{best}} != towerHealth_{{dir}}) {
                    bestWins = towerHealth_{{best}} < towerHealth_{{dir}};
                    break {{label}};
                }
            }

            // If I can attack, choose the square which lets me land a hit.
            if (canLandHit_{{best}} != canLandHit_{{dir}}) {
                bestWins = canLandHit_{{best}};
                break {{label}};
            }
        } else {
            // If I can't attack, choose the square which gets me out of action radius.
            if (canBeHit_{{best}} != canBeHit_{{dir}}) {
                bestWins = !canBeHit_{{best}};
                break {{label}};
            }
        }

        // If both squares are in action radius, prefer the one which lets you get out of action radius.
        if (canBeHit_{{best}} && canBeHit_{{dir}}) {
            if ((minDistToEnemy_{{best}} <= 2) != (minDistToEnemy_{{dir}} <= 2)) {
                bestWins = !(minDistToEnemy_{{best}} <= 2);
                break {{label}};
            }
        }

        // If I'm not in action radius, and I can't land a hit at either square,
        // Prefer the one which prepares me to hit a low-health tower.
        // If those are the same, chose the square that gets me closer to the enemy.
        // Otherwise, there's no difference between the squares and we should go for penalty.
        else if (!canLandHit_C && !canLandHit_{{best}} && !canLandHit_{{dir}}) {
            if (towerHealth_{{best}} != towerHealth_{{dir}}) {
                bestWins = towerHealth_{{best}} < towerHealth_{{dir}};
                break {{label}};
            }

            if (minDistToEnemy_{{best}} != minDistToEnemy_{{dir}}) {
                bestWins = minDistToEnemy_{{best}} < minDistToEnemy_{{dir}};
                break {{label}};
            }
        }

        // All else equal, prefer the square with better paint penalty.
        bestWins = (penalty_{{best}} <= penalty_{{dir}});
        break {{label}};
    }
    {# We can get rid of the copy if we use a switch.  #}
    {# Just trying to get something down at the moment. #}
    if (!bestWins) {
        {{ copy(type, 'best', dir) | indent(4) -}}
        bestDir = {{ directions[i] }};
    }
    {% endmacro -%}
    /* ################## CHOOSE BEST #################### */


    /*------------------ ADD ALLY --------------------*/
    {%- macro addAlly(type, i) -%}
    {%- set robotVar = 'robot' -%}
    {%- set dir = shortDirections[i] -%}
    {%- set label = 'addAlly' ~ _ ~ dir -%}
    {{label}}: {
        {# if (!canMove_{{ dir }}) break {{label}};
        int d = targetLoc_{{dir}}.distanceSquaredTo({{robotVar}}.location); #}
    }
    {% endmacro -%}
    /* ################## ADD ALLY #################### */

    /*------------------ ADD ENEMY --------------------*/
    {# TODO: Factor into seperate pieces for each unit. #}
    {%- macro addEnemy(type, i) -%}
    {%- set robotVar = 'robot' -%}
    {%- set dir = shortDirections[i] -%}
    {%- set label = 'addEnemy' ~ _ ~ dir %}
    {{label}}: {
        if (!canMove_{{dir}}) break {{label}};
        int d = targetLoc_{{dir}}.distanceSquaredTo({{robotVar}}.location);
        switch (robot.type) {
            case MOPPER: {
                // Expected Paint taken.
                if (d <= UnitType.MOPPER.actionRadiusSquared) {
                    penalty_{{dir}} += 3.3;
                } else if (d <= 8) {
                    penalty_{{dir}} += 2.5;
                }
                break {{label}};
            }
            {% for tower in [
                'LEVEL_ONE_DEFENSE_TOWER', 'LEVEL_ONE_MONEY_TOWER', 'LEVEL_ONE_PAINT_TOWER',
                'LEVEL_THREE_DEFENSE_TOWER', 'LEVEL_THREE_MONEY_TOWER', 'LEVEL_THREE_PAINT_TOWER',
                'LEVEL_TWO_DEFENSE_TOWER', 'LEVEL_TWO_MONEY_TOWER', 'LEVEL_TWO_PAINT_TOWER'] -%}
            case {{tower}}: {
                if (actionReady && d <= {{type}}ActionRadiusSquared) {
                    {% if type == 'splasher' %}
                    myHealthDmg_{{dir}} = {{type}}AoeAttackStrength;
                    {% else %}
                    myHealthDmg_{{dir}} = {{type}}AttackStrength;
                    {% endif %}
                    
                    canLandHit_{{dir}} = true;
                }
                if (d <= UnitType.{{tower}}.actionRadiusSquared) {
                    // Should have another one for AOE damage.
                    healthDmgAttackRange_{{dir}} += UnitType.{{tower}}.attackStrength;
                    canBeHit_{{dir}} = true;
                }
                if (d <= minDistToEnemy_{{dir}}) {
                    towerHealth_{{dir}} = robot.health;
                    minDistToEnemy_{{dir}} = d;
                }
                break {{label}};
            }
            {% endfor %}
            default: break {{label}};
        }
    }
    {% endmacro %}
    /* ################## ADD ENEMY #################### */

    /*------------------ INIT TARGET --------------------*/
    {%- macro initTarget(type, i) -%}
    {{ initTargetWithSuffix(type, i=i, suffix=shortDirections[i]) }}
    {% endmacro -%}

    {%- macro initTargetWithSuffix(type, i, suffix) -%}
    {%- set dir = directions[i] -%}
    {%- set val = 'true' if dir == 'Direction.CENTER' else ('rc.canMove(' ~ dir ~ ')' ) -%}
    MapLocation targetLoc_{{suffix}} = SquareManager.m{{dirX[i]+2}}{{dirY[i]+2}};
    boolean canMove_{{suffix}} = ({{val}});
    double healthDmgAttackRange_{{suffix}} = 0;
    double myHealthDmg_{{suffix}} = 0;
    int minDistToEnemy_{{suffix}} = 100000;
    int penalty_{{suffix}} = SquareManager.penalty{{dirX[i]+2}}{{dirY[i]+2}};
    int towerHealth_{{suffix}} = 1000000;
    boolean canBeHit_{{suffix}} = false;
    boolean canLandHit_{{suffix}} = false;
    {% endmacro -%}
    /* ################## INIT TARGET #################### */
    
    /*------------------ COPY --------------------*/
    {# WARNING THIS MUST BE UPDATED OR MICRO WILL HAVE BUGS #}
    {%- macro copy(type, dest, src) -%}
    {%- for attribute in [
        'targetLoc', 'canMove', 'healthDmgAttackRange',
        'myHealthDmg', 'minDistToEnemy', 'penalty',
        'towerHealth', 'canBeHit', 'canLandHit'] -%}
    {{attribute}}_{{dest}} = {{attribute}}_{{src}};
    {% endfor -%}
    {% endmacro -%}
    /* ################## COPY #################### */

    {% for type in ['soldier', 'splasher'] %}
    {{ attackMicro(type) }}
    {% endfor %}

}