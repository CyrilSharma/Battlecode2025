
{% import 'helpers/Utils.java.jinja2' as utils %}

package current;
import battlecode.common.*;

public class SymmetryChecker {

    public enum Symmetry {
        Unknown,
        Rotational,
        Horizontal,
        Vertical
    };

    public static int maxY;
    public static int maxX;
    public static long seen_fused;
    public static RobotController rc;
    public static void init(RobotController rc) {
        SymmetryChecker.rc = rc;
        maxY = rc.getMapHeight() - 1;
        maxX = rc.getMapWidth() - 1;
    }

    public static boolean isSymmetryKnown() {
        return possibleSymmetries() == 1;
    }

    public static int possibleSymmetries() {
        return (VSYM + HSYM + RSYM);
    }

    public static Symmetry getSymmetry() {
        return switch (VSYM * 4 + HSYM * 2 + RSYM) {
            case 1 -> Symmetry.Rotational;
            case 2 -> Symmetry.Horizontal;
            case 4 -> Symmetry.Vertical;
            default -> Symmetry.Unknown;
        };
    }

    public static int VSYM = 1;
    public static int HSYM = 1;
    public static int RSYM = 1;
    public static void run() throws GameActionException {
        if (isSymmetryKnown()) return;
        if (HSYM != 0) checkHorizontal();
        if (VSYM != 0) checkVertical();
        if (RSYM != 0) checkRotational();
    }

    public static void checkHorizontal() throws GameActionException {
        switch (rc.getLocation().y) {
            {% for posY in range(0, 60) -%}
            case {{ posY }} -> {
                {% for y in range(posY - 4, posY + 5) -%}
                {%- if y >= 0 and y < 60 -%}
                seen_fused = TileLoader.seen{{ y }} & getSeenHorizontal({{ y }});
                if ((TileLoader.wall{{ y }} & seen_fused) != (getWallHorizontal({{ y }}) & seen_fused)) {
                    HSYM = 0;
                }
                if ((TileLoader.ruin{{ y }} & seen_fused) != (getRuinHorizontal({{ y }}) & seen_fused)) {
                    HSYM = 0;
                }
                {% endif -%}
                {% endfor %}
            }
            {% endfor %}
            default -> {}
        }
    }

    public static void checkVertical() throws GameActionException {
        switch (rc.getLocation().x) {
            {% for posX in range(0, 60) -%}
            case {{ posX }} -> {
                {% for x in range(posX - 4, posX + 5) -%}
                {%- if x >= 0 and x < 60 -%}
                seen_fused = TileLoader.seen{{ x }} & TileLoader.seen_reversed{{ x }};
                if ((TileLoader.wall{{ x }} & seen_fused) != (TileLoader.wall_reversed{{ x }} & seen_fused)) {
                    VSYM = 0;
                }
                if ((TileLoader.ruin{{ x }} & seen_fused) != (TileLoader.ruin_reversed{{ x }} & seen_fused)) {
                    VSYM = 0;
                }
                {% endif -%}
                {% endfor %}
            }
            {% endfor %}
            default -> {}
        }
    }

    public static void checkRotational() throws GameActionException {
        switch (rc.getLocation().y) {
            {% for posY in range(0, 60) -%}
            case {{ posY }} -> {
                {% for y in range(posY - 4, posY + 5) -%}
                {%- if y >= 0 and y < 60 -%}
                seen_fused = TileLoader.seen{{ y }} & getSeenReversedHorizontal({{ y }});
                if ((TileLoader.wall{{ y }} & seen_fused) != (getWallReversedHorizontal({{ y }}) & seen_fused)) {
                    RSYM = 0;
                }
                if ((TileLoader.ruin{{ y }} & seen_fused) != (getRuinReversedHorizontal({{ y }}) & seen_fused)) {
                    RSYM = 0;
                }
                {% endif -%}
                {% endfor %}
            }
            {% endfor %}
            default -> {}
        }
    }

    // Can be done by just having masks that store the correct horizontal mask or whatever.
    {% macro getHorizontal(mask, methodName) %}
    public static long {{methodName}}(int y) {
        return switch (maxY - y) {
            {% for val in range(60) %}
            case {{ val }} -> TileLoader.{{mask}}{{ val }};
            {%- endfor %}
            default -> 0;
        };
    }
    {% endmacro %}
    {{ getHorizontal(mask='wall', methodName='getWallHorizontal') }}
    {{ getHorizontal(mask='seen', methodName='getSeenHorizontal') }}
    {{ getHorizontal(mask='ruin', methodName='getRuinHorizontal') }}
    {{ getHorizontal(mask='wall_reversed', methodName='getWallReversedHorizontal') }}
    {{ getHorizontal(mask='seen_reversed', methodName='getSeenReversedHorizontal') }}
    {{ getHorizontal(mask='ruin_reversed', methodName='getRuinReversedHorizontal') }}
}