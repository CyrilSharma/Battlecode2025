package current;
import battlecode.common.*;

public class Harass {
    RobotInfo friend = null;
    public static RobotController rc;
    public static boolean wasHarasser = false;
    public static boolean isHarasser = false;
    public static boolean reachedH = false;
    public static boolean reachedR = false;
    public static boolean reachedV = false;
    public static boolean seenCenter = false;
    public static MapLocation center = null;
    public static void init(RobotController rc) throws GameActionException {
        Harass.rc = rc;
        center = new MapLocation(rc.getMapWidth() / 2, rc.getMapHeight() / 2);
    }

    public static void initTurn() throws GameActionException {
        if (!isHarasser && !wasHarasser) {
            isHarasser = decideHarasser();
            if (isHarasser) wasHarasser = true;
        }
        // We'd do this with messages later on.
    }

    public static boolean decideHarasser() throws GameActionException {
        if (rc.getRoundNum() >= 50) return false;
        if (rc.getRoundNum() > 5) return false;
        if (RefuelManager.home == null) return false;
        if (!rc.canSenseLocation(RefuelManager.home)) return false;
        RobotInfo r = rc.senseRobotAtLocation(RefuelManager.home);
        if (r == null) return false;
        if (r.getType() == UnitType.LEVEL_ONE_MONEY_TOWER) return false;
        return true;
    }

    public static boolean shouldHarass() {
        return isHarasser;
    }

    public static void harass() throws GameActionException {
        MapLocation myloc = rc.getLocation();
        int sym = SymmetryChecker.HSYM + SymmetryChecker.RSYM + SymmetryChecker.VSYM;
        if (sym > 1 && !seenCenter) {
            if (rc.getLocation().distanceSquaredTo(center) <= 9) seenCenter = true;
            else {
                Pathing.pathTo(center);
                return;
            }
        }

        int closest = 1000000000;
        MapLocation best = null;
        MapLocation target;
        MapLocation ruin = RefuelManager.firstHome;
        if (SymmetryChecker.RSYM != 0 && !reachedR) {
            target = new MapLocation(rc.getMapWidth() - ruin.x - 1, rc.getMapHeight() - ruin.y - 1);
            if (myloc.distanceSquaredTo(target) <= 9) {
                reachedR = true;
            }
            else {
                int d = rc.getLocation().distanceSquaredTo(target);
                if (d < closest) {
                    best = target;
                    closest = d;
                }
            }
        }
        if (SymmetryChecker.HSYM != 0 && !reachedH) {
            target = new MapLocation(ruin.x, rc.getMapHeight() - ruin.y - 1);
            if (myloc.distanceSquaredTo(target) <= 9) {
                reachedH = true;
            }
            else {
                int d = rc.getLocation().distanceSquaredTo(target);
                if (d < closest) {
                    best = target;
                    closest = d;
                }
            }
        }
        if (SymmetryChecker.VSYM != 0 && !reachedV) {
            target = new MapLocation(rc.getMapWidth() - ruin.x - 1, ruin.y);
            if (myloc.distanceSquaredTo(target) <= 9) {
                reachedV = true;
            }
            else {
                int d = rc.getLocation().distanceSquaredTo(target);
                if (d < closest) {
                    best = target;
                    closest = d;
                }
            }
        }
        if (best != null) Pathing.pathTo(best);
        else isHarasser = false;
    }
}