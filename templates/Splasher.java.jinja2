{% import 'helpers/Utils.java.jinja2' as utils %}

package current;
import battlecode.common.*;

public class Splasher {
    public static RobotController rc;
    public static MapLocation buildTower = null;
    public static MapLocation myloc;
    public static int paintCapacity = UnitType.SPLASHER.paintCapacity;
    public static int myPaint;
    public static boolean shouldGoHome = false;
    public static MapLocation startingHome = null;
    public static boolean reachedSymmetricTarget = false;
    public static boolean lowHealth = false;
    public static int PAINT_THRESHOLD = 3;

    public static void init(RobotController rc) {
        Splasher.rc = rc;
    }

    

    public static void run() throws GameActionException {
        initTurn();
        runTurn();
        postTurn();
    }

    public static void initTurn() throws GameActionException {
        myloc = rc.getLocation();
        myPaint = rc.getPaint();

        RefuelManager.setHome();
        if (startingHome == null) {
            startingHome = RefuelManager.home;
        }
                
        computeSplashTarget();
        lowHealth = (myPaint <= (paintCapacity >> 2));
        if (lowHealth != shouldGoHome) {
            shouldGoHome = lowHealth;
            RefuelManager.reset();
        }
    }
    
    public static void runTurn() throws GameActionException {
        if (shouldGoHome) {
            rc.setIndicatorString("Refueling");
            RefuelManager.refuel();
            return;
        } else if (splashTarget != null) {
            rc.setIndicatorString("Seeking MopTarget " + splashTarget);
            handleSplashTarget(splashTarget);
            return;
        } else if (SymmetryChecker.possibleSymmetries() < 3 && !reachedSymmetricTarget) {
            rc.setIndicatorString("Symmetry is known! " + SymmetryChecker.getSymmetry());
            MapLocation home = startingHome;
            MapLocation target = null;
            if (SymmetryChecker.HSYM != 0) {
                target = new MapLocation(home.x, rc.getMapHeight() - home.y);
            } else if (SymmetryChecker.VSYM != 0) {
                target = new MapLocation(rc.getMapWidth() - home.x, home.y);
            } else if (SymmetryChecker.RSYM != 0) {
                target = new MapLocation(rc.getMapWidth() - home.x, rc.getMapHeight() - home.y);
            };
            if (myloc.distanceSquaredTo(target) <= 9) reachedSymmetricTarget = true;
            Pathing.safePathTo(target);
        } else {
            rc.setIndicatorString("Exploring");
            Explore.explore(null);
        }
    }

    public static void postTurn() throws GameActionException {
        doAttack();
    }


    public static MapLocation splashTarget = null;
    public static void computeSplashTarget() throws GameActionException {
        SquareManager.loadSquares();
        MapLocation myloc = rc.getLocation();
        int x = myloc.x, y = myloc.y;
        int bestCount = 0;
        MapLocation bestLoc = null;
        {% set offset = 4 %}
        {% for di in range(-offset, offset+1, 1) %}
        {% for dj in range(-offset, offset+1, 1) %}
        {% set i = squareOffset(di) %}
        {% set j = squareOffset(dj) %}
        PaintType mpaint{{i}}{{j}} = PaintType.ALLY_SECONDARY;
        if (SquareManager.canSense{{i}}{{j}}) {
            if (!SquareManager.info{{i}}{{j}}.hasRuin() && !SquareManager.info{{i}}{{j}}.isWall()) {
                mpaint{{i}}{{j}} = SquareManager.info{{i}}{{j}}.getPaint();
            }
        }
        {% endfor %}
        {% endfor %}

        {% for di in range(-(offset - 1), offset, 1) %}
        {% for dj in range(-(offset - 1), offset, 1) %}
        {% set i = squareOffset(di) %}
        {% set j = squareOffset(dj) %}
        if (SquareManager.canSense{{i}}{{j}}) {
            int count = 0;
            {% for dk in range(-1, 2, 1) %}
            {% for dl in range(-1, 2, 1) %} 
            switch (mpaint{{squareOffset(di+dk)}}{{squareOffset(dj+dl)}}) {
                case EMPTY -> {}// count += 1;
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> ++count;
                default -> {}
            }
            {% endfor %}
            {% endfor %}
            if (count > bestCount) {
                bestLoc = SquareManager.m{{i}}{{j}};
                bestCount = count;
            }
        }
        {% endfor %}
        {% endfor %}

        if (bestCount <= PAINT_THRESHOLD) {
            splashTarget = null;
            return;
        }

        if (bestLoc != null)
            splashTarget = bestLoc;
    }

    public static void handleSplashTarget(MapLocation target) throws GameActionException {
        if (myloc.distanceSquaredTo(target) >= 16) {
            Pathing.safePathTo(target);
            return;
        }

        int bestDist = 1000000;
        int bestScore = -10000;
        MapLocation bestLoc = null;
        {% for i in range(-2, 3, 1) %}
        {% for j in range(-2, 3, 1) %}
        {
            MapLocation nloc = new MapLocation(target.x + {{i}}, target.y + {{j}});
            if (rc.canSenseLocation(nloc)) {
                MapInfo mi = rc.senseMapInfo(nloc);
                int score = switch (mi.getPaint()) {
                    case ENEMY_PRIMARY, ENEMY_SECONDARY -> -2;
                    case EMPTY -> -1;
                    case ALLY_PRIMARY, ALLY_SECONDARY -> 0;
                };

                int dist = nloc.distanceSquaredTo(myloc);
                if ((score > bestScore) || (score == bestScore && dist < bestDist)) {
                    bestScore = score;
                    bestDist = dist;
                    bestLoc = nloc;
                }
            }
        }
        {% endfor %}
        {% endfor %}

        if (bestLoc != null) {
            Pathing.safePathTo(bestLoc);
            MapLocation newLoc = rc.getLocation();
            // rc.setIndicatorString("True Splash Target " + bestLoc + " " + myloc + " " + newLoc + " " + splashTarget);

        }
    }

    public static void doAttack() throws GameActionException {
        if (!rc.isActionReady() || lowHealth) return;
        SquareManager.loadSquares();
        MapLocation myloc = rc.getLocation();
        int x = myloc.x, y = myloc.y;
        MapLocation bestLoc = null;
        int count = 0, bestCount = -1;

        {% set offset = 3 %}
        {% for di in range(-offset, offset+1, 1) %}
        {% for dj in range(-offset, offset+1, 1) %}
        {% set i = squareOffset(di) %}
        {% set j = squareOffset(dj) %}
        PaintType mpaint{{i}}{{j}} = PaintType.ALLY_SECONDARY;
        if (SquareManager.canSense{{i}}{{j}}) {
            if (!SquareManager.info{{i}}{{j}}.hasRuin() && !SquareManager.info{{i}}{{j}}.isWall()) {
                mpaint{{i}}{{j}} = SquareManager.info{{i}}{{j}}.getPaint();
            }
        }
        {% endfor %}
        {% endfor %}

        {% for di in range(-2, 3, 1) %}
        {% for dj in range(-2, 3, 1) %}
        {% set i = squareOffset(di) %}
        {% set j = squareOffset(dj) %}
        if (rc.canAttack(SquareManager.m{{i}}{{j}})) {
            count = 0;
            {% for dk in range(-1, 2, 1) %}
            {% for dl in range(-1, 2, 1) %} 
            switch (mpaint{{squareOffset(di+dk)}}{{squareOffset(dj+dl)}}) {
                case EMPTY -> {}// count += 1;
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> count += 2;
                default -> {}
            }
            {% endfor %}
            {% endfor %}
            if (count > bestCount) {
                bestLoc = SquareManager.m{{i}}{{j}};
                bestCount = count;
            }
        }
        {% endfor %}
        {% endfor %}

        {# rc.setIndicatorString("bestCount: " + bestCount + " " + bestLoc.x + " " + bestLoc.y); #}
        if (bestCount > PAINT_THRESHOLD) {
            rc.attack(bestLoc);
        }
    }
}