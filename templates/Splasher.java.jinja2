{% import 'helpers/Utils.java.jinja2' as utils %}

package current;
import battlecode.common.*;

public class Splasher {
    public static RobotController rc;
    public static MapLocation buildTower = null;
    public static MapLocation myloc;
    public static int paintCapacity = UnitType.SOLDIER.paintCapacity;
    public static int myPaint;
    public static boolean shouldGoHome = false;
    public static boolean harrasser = true;
    public static MapLocation center = null;
    public static boolean reachedH = false;
    public static boolean reachedR = false;
    public static boolean reachedV = false;
    public static boolean seenCenter = false;

    public static void init(RobotController rc) {
        Splasher.rc = rc;
        center = new MapLocation(rc.getMapWidth() / 2, rc.getMapHeight() / 2);
    }

    public static void run() throws GameActionException {
        initTurn();
        runTurn();
        postTurn();
    }

    public static void initTurn() throws GameActionException {
        myloc = rc.getLocation();
        myPaint = rc.getPaint();

        RefuelManager.setHome();
        boolean lowHealth = (myPaint <= (paintCapacity >> 2));
        if (lowHealth != shouldGoHome) {
            shouldGoHome = lowHealth;
            RefuelManager.reset();
        }
    }
    
    public static void runTurn() throws GameActionException {
        if (shouldGoHome) {
            rc.setIndicatorString("Refueling");
            RefuelManager.refuel();
            return;
        } else if (Attack.shouldSplasherMicro()) {
            rc.setIndicatorString("Attacking");
            Attack.splasherAttackMicro();
            return;
        }
        int sym = SymmetryChecker.HSYM + SymmetryChecker.RSYM + SymmetryChecker.VSYM;
        if (sym > 1 && !seenCenter) {
            if (rc.getLocation().distanceSquaredTo(center) <= 9) seenCenter = true;
            else {
                Pathing.pathTo(center);
                return;
            }
        }
        if (harrasser) {
            int closest = 1000000000;
            MapLocation best = null;
            MapLocation target;
            MapLocation ruin = RefuelManager.firstHome;
            if (SymmetryChecker.RSYM != 0 && !reachedR) {
                target = new MapLocation(rc.getMapWidth() - ruin.x - 1, rc.getMapHeight() - ruin.y - 1);
                if (myloc.distanceSquaredTo(target) <= 9) {
                    reachedR = true;
                }
                else {
                    int d = rc.getLocation().distanceSquaredTo(target);
                    if (d < closest) {
                        best = target;
                        closest = d;
                    }
                }
            }
            if (SymmetryChecker.HSYM != 0 && !reachedH) {
                target = new MapLocation(ruin.x, rc.getMapHeight() - ruin.y - 1);
                if (myloc.distanceSquaredTo(target) <= 9) {
                    reachedH = true;
                }
                else {
                    int d = rc.getLocation().distanceSquaredTo(target);
                    if (d < closest) {
                        best = target;
                        closest = d;
                    }
                }
            }
            if (SymmetryChecker.VSYM != 0 && !reachedV) {
                target = new MapLocation(rc.getMapWidth() - ruin.x - 1, ruin.y);
                if (myloc.distanceSquaredTo(target) <= 9) {
                    reachedV = true;
                }
                else {
                    int d = rc.getLocation().distanceSquaredTo(target);
                    if (d < closest) {
                        best = target;
                        closest = d;
                    }
                }
            }
            if (best != null) Pathing.pathTo(best);
            else harrasser = false;
        }
        Explore.explore(null);
    }

    public static void postTurn() throws GameActionException {
        doAttack();
    }

    public static void doAttack() throws GameActionException {
        rc.setIndicatorString("Preparing to attack, but didn't");
        if (!rc.isActionReady() || rc.getPaint() < (paintCapacity >> 2)) return;
        rc.setIndicatorString("Running attack code...");
        MapLocation myloc = rc.getLocation();
        int x = myloc.x, y = myloc.y;
        MapLocation bestLoc = null;
        int count = 0, bestCount = -1;

        {% for i in range(-3, 4, 1) %}
        {% for j in range(-3, 4, 1) %}
        MapLocation mloc{{i+3}}{{j+3}} = new MapLocation(x + {{ i }}, y + {{ j }});
        PaintType mpaint{{i+3}}{{j+3}} = PaintType.ALLY_SECONDARY;
        if (rc.canSenseLocation(mloc{{i+3}}{{j+3}})) {
            MapInfo minfo{{i+3}}{{j+3}} = rc.senseMapInfo(mloc{{i+3}}{{j+3}});
            if (!minfo{{i+3}}{{j+3}}.hasRuin() && !minfo{{i+3}}{{j+3}}.isWall()) {
                mpaint{{i+3}}{{j+3}} = minfo{{i+3}}{{j+3}}.getPaint();
            }
        }
        {% endfor %}
        {% endfor %}

        {% for i in range(-2, 3, 1) %}
        {% for j in range(-2, 3, 1) %}
        if (rc.canAttack(mloc{{i+3}}{{j+3}})) {
            count = 0;
            {% for k in range(-1, 2, 1) %}
            {% for l in range(-1, 2, 1) %} 
            switch (mpaint{{i+k+3}}{{j+l+3}}) {
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> count += 1;
                default -> {}
            }
            {% endfor %}
            {% endfor %}
            if (count > bestCount) {
                bestLoc = mloc{{i+3}}{{j+3}};
                bestCount = count;
            }
        }
        {% endfor %}
        {% endfor %}

        {# rc.setIndicatorString("bestCount: " + bestCount + " " + bestLoc.x + " " + bestLoc.y); #}
        if (bestCount >= 4) {
            rc.attack(bestLoc);
        }
    }
}