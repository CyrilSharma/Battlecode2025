package current;
import java.util.Random;
import battlecode.common.*;

public class RefuelManager {    
    public static RobotController rc;
    public static int homeState;
    public static MapLocation home = null;
    public static boolean reachedHome = false;

    {% set numberPreviousPositions = 10 %}
    {% for i in range(numberPreviousPositions) %}
    public static MapLocation previousPosition{{i}};
    {% endfor %}

    public static void init(RobotController rc) {
        RefuelManager.rc = rc;
        {% for i in range(numberPreviousPositions) %}
        previousPosition{{i}} = rc.getLocation();
        {% endfor %}
    }

    public static void updatePositions() throws GameActionException {
        {% for i in range(numberPreviousPositions - 1, 0, -1) %}
        previousPosition{{i}} = previousPosition{{i - 1}};
        {% endfor %}
        previousPosition{{0}} = rc.getLocation();
    }
    
    public static final int TOWER_RUIN = 0;
    public static final int TOWER_NOT_PAINT = 1;
    public static final int TOWER_PAINT = 2;
    public static int getTowerState(RobotInfo robot) {
        if (robot == null) return TOWER_RUIN;
        else {
            switch (robot.type) {
                case LEVEL_ONE_PAINT_TOWER, LEVEL_TWO_PAINT_TOWER, LEVEL_THREE_PAINT_TOWER:
                    return TOWER_PAINT;
                default: {
                    if (robot.paintAmount != 0) return TOWER_PAINT;
                    else return TOWER_NOT_PAINT;
                }
            }
        }
    }
   
    public static void setHome() throws GameActionException {
        if (home != null && rc.canSenseLocation(home)) {
             RobotInfo robot = rc.senseRobotAtLocation(home);
             homeState = getTowerState(robot);
        }
        MapLocation[] ruins = rc.senseNearbyRuins(-1);
        for (MapLocation ruin: ruins) {
            RobotInfo robot = rc.senseRobotAtLocation(ruin);
            if (robot != null && robot.team != rc.getTeam()) continue;
            int towerState = getTowerState(robot);
            // This home null check is only for when the robot is initialized
            // Home will never be null after the robot is created.
            if (home == null || towerState >= homeState) {
                home = ruin;
                homeState = towerState;
                reachedHome = false;
            }
        }
    }

    public static void refuel() throws GameActionException {
        boolean atHome = (rc.getLocation().distanceSquaredTo(home) <= 9);
        if (atHome && !reachedHome) {
            reachedHome = true;
        }
            
        if (!reachedHome && homeState == TOWER_PAINT) {
            rc.setIndicatorString("Going home... " + home.x + " " + home.y);
            Pathing.pathTo(home);
        } else if (atHome && homeState == TOWER_PAINT) {
            rc.setIndicatorString("At home, refueling...");
            Pathing.pathTo(home);
            RobotInfo r = rc.senseRobotAtLocation(home);
            if (r == null) { 
                homeState = getTowerState(r);
            } else {
                int amt = Math.max(rc.getPaint() - rc.getType().paintCapacity, -r.getPaintAmount());
                if (rc.canTransferPaint(home, amt)) {
                    rc.transferPaint(home, amt);
                }
            }
        } else if (homeState != TOWER_PAINT) {
            rc.setIndicatorString("Going somewhere new!");
            findPaintTower();
        } else {
            rc.setIndicatorString("homeState := " + homeState + ", " + home.x + " " + home.y);
        }
    }

    public static void findPaintTower() throws GameActionException {
        double bestForce = 100000000;
        double currentForce = 0;
        Direction bestDir = Direction.CENTER;
        MapLocation myloc = rc.getLocation();
        MapLocation nloc;
        {% for direction in directions %}
        nloc = myloc.add({{direction}});
        if (rc.canSenseLocation(nloc) && rc.canMove({{direction}})) {
            MapInfo mi = rc.senseMapInfo(nloc);
            if (mi.getPaint().isAlly()) {
                // currentDistance =  0.2 * nloc.distanceSquaredTo(pastTowerTarget);
                currentForce = 0;
                {% for i in range(numberPreviousPositions) %}
                currentForce += (1000 / (nloc.distanceSquaredTo(previousPosition{{i}}) + 1));
                // currentDistance += nloc.distanceSquaredTo(previousPosition{{i}});
                {% endfor %}
                
                if (currentForce < bestForce) {
                    bestDir = {{direction}};
                    bestForce = currentForce;
                }
            }
        }
        {% endfor %}

        if (rc.canMove(bestDir))
            rc.move(bestDir);
        updatePositions();
    }


    public static void reset() throws GameActionException {
        reachedHome = false;
    }
}