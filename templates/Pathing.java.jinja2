package current;
import battlecode.common.*;

public class Pathing {
    public static RobotController rc;
    public static void init(RobotController rc) {
        Pathing.rc = rc;
        resetPathing(null);
    }

    {% set PATHING_ITERS = 10 %}
    {% set MAX_PATH_BACKUP = 50 * PATHING_ITERS %}
    {% set VISION_WIDTH = 9 %}
    {% set MIDDLE_OFFSET = intDiv(VISION_WIDTH, 2) %}
    {% set BOTTOM_MASK_ROWS = 7 %}
    {% set BOTTOM_MASK_BITS = BOTTOM_MASK_ROWS * VISION_WIDTH %}

    public static MapLocation myloc;
    public static boolean clockwise = false;
    public static boolean shouldGuessRotation = true;
    public static int bestBugDist = 100000000;
    public static boolean shouldBug = false;
    public static boolean doneSimulating = false;
    public static MapLocation currentTarget = null;

    public static int pathLength = 0;
    {% for i in range(MAX_PATH_BACKUP) %}
    public static MapLocation bugPath{{i}} = null;
    {% endfor %}

    public static void appendCurrentPosition() {
        switch (pathLength) {
            {% for length in range(MAX_PATH_BACKUP - 1, -1, -1) %}
            case {{length}} ->  {
                {% if length != 0 %}
                if (!bugPath{{length-1}}.equals(currentBugPosition))
                {% endif %}
                {
                    bugPath{{length}} = currentBugPosition;
                    pathLength++;
                }
            }
            {% endfor %}
            default -> { assert(pathLength <= {{MAX_PATH_BACKUP}}); }
        }
    }

    public static void setCurrentPosition() {
        currentBugPosition = null;
        findCurrentBugPosition: {
            switch (pathLength - 1) {
                {% for i in range(MAX_PATH_BACKUP - 1, -1, -1) %}
                case {{i}}: {
                    if (bugPath{{i}}.distanceSquaredTo(myloc) <= GameConstants.VISION_RADIUS_SQUARED) {
                        currentBugPosition = bugPath{{i}};
                        break findCurrentBugPosition;
                    }
                }
                {% endfor %}
                default: {
                    assert(pathLength <= {{MAX_PATH_BACKUP}});
                }
            }
        }
        if (currentBugPosition == null) {
            resetPathing(currentTarget);
        }
    }

    public static MapLocation currentBugPosition = null;
    public static Direction currentBugDirection = null;
    public static void pathTo(MapLocation target) throws GameActionException {
        if (!rc.isMovementReady()) return;

        // Simple cases that shouldn't require the full call.
        myloc = rc.getLocation();
        if (myloc.equals(target)) return;
        if (myloc.isAdjacentTo(target)) {
            if (rc.canMove(myloc.directionTo(target))) {
                Pathing.move(myloc.directionTo(target));
            }
            return;
        }

        int count = Clock.getBytecodeNum();
        rc.setIndicatorDot(target, 0, 0, 255);
        if (currentTarget == null || !target.equals(currentTarget)) {
            resetPathing(target);
        } else {
            setCurrentPosition();
        }
        
        rc.setIndicatorDot(currentBugPosition, 0, 255, 0);
        doneSimulating = currentBugPosition.equals(target);
        bugLoop: {
            {% for i in range(5) %}
            if (doneSimulating || currentBugPosition.equals(target)) break bugLoop;
            if (shouldBug) {
                bug();
            } else {
                greedy();
            }
            appendCurrentPosition();
            {% endfor %}
        }
        rc.setIndicatorDot(currentBugPosition, 0, 255, 255);
        {# if (shouldBug && currentBugDirection != null && rc.onTheMap(currentBugPosition.add(currentBugDirection))) {
            rc.setIndicatorLine(currentBugPosition, currentBugPosition.add(currentBugDirection), 0, 0, 0);
        } #}

        long localMask0 = 0;
        long localMask1 = 0;
        int index = ((currentBugPosition.y - (myloc.y - {{MIDDLE_OFFSET}})) * {{VISION_WIDTH}})
                   + (currentBugPosition.x - (myloc.x - {{MIDDLE_OFFSET}}));
        if (index >= {{ BOTTOM_MASK_BITS }}) {
            localMask1 = 1L << (index - {{ BOTTOM_MASK_BITS }});
        } else {
            localMask0 = 1L << index;
        }

        long temp;
        long adjIntersection;
        // 0b000000000
        //   000111000
        //   000111000
        //   000111000
        //   000000000
        //   000000000
        //   000000000L;
        long adjTiles = 0b000000000000111000000111000000111000000000000000000000000000000L;
        long mask0 = 0x7FFFFFFFFFFFFFFFL;
        long mask1 = 0x3FFFFL;
        long loverflow = 0x7fbfdfeff7fbfdfeL;
        long roverflow = 0x3fdfeff7fbfdfeffL;

        // Seen mask.
        // 111111111
        // 111111111
        // 111111111
        // 111111111
        // 111111111
        // 011111110
        // 001111100
        long passible0 = (~(
              ((long)(TileLoader.local_wall6 | TileLoader.local_ruin6) << {{6 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall5 | TileLoader.local_ruin5) << {{5 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall4 | TileLoader.local_ruin4) << {{4 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall3 | TileLoader.local_ruin3) << {{3 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall2 | TileLoader.local_ruin2) << {{2 * VISION_WIDTH}})
            | ((long)(TileLoader.local_wall1 | TileLoader.local_ruin1) << {{VISION_WIDTH}})
            | ((long)(TileLoader.local_wall0 | TileLoader.local_ruin0))
        ) | localMask0) & 0b111111111111111111111111111111111111111111111011111110001111100L;

        long passible1 = (~(
              ((long)(TileLoader.local_wall8) << {{VISION_WIDTH}})
            | ((long)(TileLoader.local_wall7))
        ) | localMask1) & 0b001111100011111110L;

        {% for dx in range(-1, 2) %}
        {% for dy in range(-1, 2) %}
        int dist{{dx+1}}{{dy+1}} = 10000;
        {% endfor %}
        {% endfor %}

        // Run a BFS
        long mask0AndPassible = mask0 & passible0;
        long mask1AndPassible = mask1 & passible1;
        bfsLoop: {
            {% for iter in range(2 * PATHING_ITERS) %}
            {# Can you think of another way to do this? This kinda sucks. #}
            adjIntersection = (localMask0 & adjTiles);

            if (adjIntersection == (passible0 & adjTiles)) break bfsLoop;
            {% for dx in range(-1, 2) %}
            {% for dy in range(-1, 2) %}
            {% set x = dx + MIDDLE_OFFSET %}
            {% set y = dy + MIDDLE_OFFSET %}
            if ((0x{{ '{:08X}'.format(bitLeftShift(1, y * VISION_WIDTH + x)) }}L & adjIntersection) != 0) { 
                dist{{dx+1}}{{dy+1}} = Math.min(dist{{dx+1}}{{dy+1}}, {{iter}});
            }
            {% endfor %}
            {% endfor %}
            localMask0 = (localMask0 | ((localMask0 << 1) & loverflow) | ((localMask0 >>> 1) & roverflow));
            localMask1 = (localMask1 | ((localMask1 << 1) & loverflow) | ((localMask1 >>> 1) & roverflow));
            temp = localMask0;
            localMask0 = (localMask0 | (localMask0 << {{VISION_WIDTH}}) | (localMask0 >>> {{VISION_WIDTH}})
                       | (localMask1 << {{VISION_WIDTH * (BOTTOM_MASK_ROWS - 1)}})) & mask0AndPassible;
            localMask1 = (localMask1 | (localMask1 << {{VISION_WIDTH}}) | (localMask1 >>> {{VISION_WIDTH}})
                       | (temp >>> {{VISION_WIDTH * (BOTTOM_MASK_ROWS - 1)}})) & mask1AndPassible;
            {% endfor %}
        }
        
        SquareManager.computePaintPenalties();

        // Pick the best direction.
        // One thing I noticed is if units are going in opposite directions,
        // Then they'll hit each other at this step. Perhaps we should disallow stay-still moves?
        String dists = "";
        {% set dirY = [1, 1, 0, -1, -1, -1,  0,  1, 0] %}
        {% set dirX = [0, 1, 1,  1,  0, -1, -1, -1, 0] %}
        Direction bestDir = null;
        Direction backupDir = null;
        int bestPenalty = 10000000;
        int bestDist = 10000000;
        int bestBugDist = 10000000;
        int centerBugDist = myloc.distanceSquaredTo(currentBugPosition);
        {% for i in range(8) %}
        {% set dir = directions[i] %}
        {% set shortDir = shortDirections[i] %}
        {
            dists += {{ '"' + shortDir + '="' }} + dist{{dirX[i]+1}}{{dirY[i]+1}} + " ";
            // boolean canMove = {{ 'rc.canMove(' ~ dir ~ ')' if dir != 'Direction.CENTER' else 'true' }};
            boolean canMove = rc.canMove({{dir}});
            MapLocation nloc = myloc.add({{dir}});
            int penalty = SquareManager.penalty{{dirX[i]+2}}{{dirY[i]+2}};
            int bugDist = nloc.distanceSquaredTo(currentBugPosition);
            boolean shouldUpdate = false;
            updateLabel: {
                if (!canMove) break updateLabel;
                backupDir = {{dir}};

                // Only consider locations that improve the distance, to avoid cycles.
                if (dist{{dirX[i]+1}}{{dirY[i]+1}} > dist{{1}}{{1}}) break updateLabel;
                if (dist{{dirX[i]+1}}{{dirY[i]+1}} == dist{{1}}{{1}} && bugDist >= centerBugDist) break updateLabel;
                
                // Choose the location with lower penalty.
                if (penalty != bestPenalty) {
                    shouldUpdate = (penalty < bestPenalty);
                    break updateLabel;
                }

                // Choose the location with lower BFS distance.
                if (dist{{dirX[i]+1}}{{dirY[i]+1}} != bestDist) {
                    shouldUpdate = dist{{dirX[i]+1}}{{dirY[i]+1}} < bestDist;
                    break updateLabel;
                }

                // Choose the location with lower Bug distance.
                if (bugDist != bestBugDist) {
                    shouldUpdate = bugDist < bestBugDist;
                    break updateLabel;
                }
            }

            Direction dir = {{dir}};
            int dist = dist{{dirX[i]+1}}{{dirY[i]+1}};
            {# {% debug('dir', 'canMove', 'dist', 'penalty', 'bugDist', 'shouldUpdate') %} #}
            if (shouldUpdate) {
                bestDir = {{dir}};
                bestDist = dist{{dirX[i]+1}}{{dirY[i]+1}};
                bestBugDist = bugDist;
                bestPenalty = penalty;
            }
        }
        {% endfor %}

        System.out.println("Chose := " + bestDir);
        System.out.println("\n");

        // Move in the best direction.
        if (bestDir != null && bestDir != Direction.CENTER) {
            Pathing.move(bestDir);
        }
        
        // If we couldn't move in any good direction
        // We are blocked by a unit, so choose some direction to backup into.
        // To let the other unit through.
        else if (backupDir != null) {
            Pathing.move(backupDir);
        }
        return;
    }

    public static void bug() throws GameActionException {
        assert(bestBugDist < 10000);
        assert(!currentBugDirection.equals(Direction.CENTER));

        if (shouldGuessRotation) {
            shouldGuessRotation = false;
            Direction dirL = currentBugDirection;
            for (int j = 8; j-- > 0;) {
                if (canMove(currentBugPosition.add(dirL))) break;
                dirL = dirL.rotateLeft();
            }

            Direction dirR = currentBugDirection;
            for (int j = 8; j-- > 0;) {
                if (canMove(currentBugPosition.add(dirR))) break;
                dirR = dirR.rotateRight();
            }

            // Check which results in a location closer to the target
            MapLocation locL = currentBugPosition.add(dirL);
            MapLocation locR = currentBugPosition.add(dirR);
            int lDist = currentTarget.distanceSquaredTo(locL);
            int rDist = currentTarget.distanceSquaredTo(locR);
            if (lDist < rDist) {
                clockwise = false;
            } else {
                clockwise = true;
            }
        }
        
        MapLocation currentLoc = null, newLoc = currentBugPosition.add(currentBugDirection);
        if (newLoc.distanceSquaredTo(myloc) <= GameConstants.VISION_RADIUS_SQUARED) {
            if (rc.onTheMap(newLoc)) {
                if (canMove(newLoc)) {
                    currentLoc = newLoc;
                }
            }
        } else {
            // We're starting to consider locations out of vision range,
            // We must halt to prevent wrong decisions.
            doneSimulating = true;
            return;
        }

        if (currentLoc == null) {
            leftLoop: {
                {% for i in range(8) %}
                newLoc = currentBugPosition.add(rotate(currentBugDirection));
                if (newLoc.distanceSquaredTo(myloc) <= GameConstants.VISION_RADIUS_SQUARED) {
                    if (rc.onTheMap(newLoc)) {
                        if (canMove(newLoc)) {
                            currentLoc = newLoc;
                            break leftLoop;
                        }
                    } else {
                        clockwise = !clockwise;
                        return;
                    }
                } else {
                    // We're starting to consider locations out of vision range,
                    // We must halt to prevent wrong decisions.
                    doneSimulating = true;
                    return;
                }
                
                // If the new direction is not passible, set currentBugDirection to it.
                currentBugDirection = rotate(currentBugDirection);
                {% endfor %}
            }
        }

        if (currentLoc != null) {
            assert(!currentLoc.equals(currentBugPosition));
            currentBugPosition = currentLoc;
            currentBugDirection = rotateOpposite(currentBugDirection);
            int d = currentBugPosition.distanceSquaredTo(currentTarget);
            if (d < bestBugDist) shouldBug = false;
        } else {
            System.out.println("Trapped in a box!");
        }
    }

    public static void greedy() throws GameActionException {
        MapInfo current_mi = rc.senseMapInfo(currentBugPosition);
        int bestPenalty = switch (current_mi.getPaint()) {
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 2;
            case ALLY_PRIMARY, ALLY_SECONDARY -> 0;
            case EMPTY -> 1;
        };
        int closestDist = currentBugPosition.distanceSquaredTo(currentTarget);
        MapLocation bestLoc = currentBugPosition;
        // Looping over all directions is kind of not great.
        {% for dir in directions %}
        {
            MapLocation newLoc = currentBugPosition.add({{dir}});
            if (newLoc.distanceSquaredTo(myloc) <= GameConstants.VISION_RADIUS_SQUARED) {
                if (rc.onTheMap(newLoc)) {
                    MapInfo mi = rc.senseMapInfo(newLoc);
                    if (mi.isPassable() || newLoc.equals(currentTarget)) {
                        boolean shouldUpdate = false;
                        int d = newLoc.distanceSquaredTo(currentTarget);
                        int penalty = switch (mi.getPaint()) {
                            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 2;
                            case ALLY_PRIMARY, ALLY_SECONDARY -> 0;
                            case EMPTY -> 1;
                        };
                        updateLabel: {
                            if (d != closestDist) {
                                shouldUpdate = (d < closestDist);
                                break updateLabel;
                            }
                            shouldUpdate = penalty < bestPenalty;
                            break updateLabel;
                        }
                        if (shouldUpdate) {
                            closestDist = d;
                            bestPenalty = penalty;
                            bestLoc = newLoc;
                        }
                    }
                }
            } else {
                // This is kind of not great.
                doneSimulating = true;
                return;
            }
        }        
        {% endfor %}

        if (!bestLoc.equals(currentBugPosition)) {
            currentBugPosition = bestLoc;
            return;
        } else {
            bestBugDist = currentBugPosition.distanceSquaredTo(currentTarget);
            currentBugDirection = currentBugPosition.directionTo(currentTarget);
            assert(!currentBugDirection.equals(Direction.CENTER));
            shouldBug = true;
            return;
        }
    }

    public static boolean canMove(MapLocation loc) throws GameActionException {
        MapInfo mi = rc.senseMapInfo(loc);
        return (mi.isPassable() || loc.equals(currentTarget));
    }

    public static Direction rotate(Direction dir) {
        return (!clockwise) ? dir.rotateLeft() : dir.rotateRight();
    }

    public static Direction rotateOpposite(Direction dir) {
        return (!clockwise) ? dir.rotateRight() : dir.rotateLeft();
    }

    public static void resetPathing(MapLocation target) {
        bestBugDist = 100000000;
        shouldBug = false;
        currentTarget = target;
        currentBugDirection = null;
        currentBugPosition = rc.getLocation();
        shouldGuessRotation = true;
        clockwise = false;
        pathLength = 0;
    }

    public static void move(Direction dir) throws GameActionException {
        rc.move(dir);
        MapLocation myloc = rc.getLocation();
        if (myloc.distanceSquaredTo(currentBugPosition) > GameConstants.VISION_RADIUS_SQUARED) {
            setCurrentPosition();
        }
    }
}