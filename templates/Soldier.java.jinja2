{% import 'helpers/Utils.java.jinja2' as utils %}

package current;
import battlecode.common.*;
import java.util.ArrayList;
import java.util.Collections;

public class Soldier {
    public static RobotController rc;
    public static boolean homeHasPaint = false;
    public static MapLocation buildTower = null;
    public static MapLocation myloc;
    public static int paintCapacity = UnitType.SOLDIER.paintCapacity;
    public static int myPaint;
    public static MapLocation exploreTarget;
    public static MapInfo[] near;
    public static MapLocation ruinLoc;
    public static MapLocation markedResource = null;
    public static boolean[][] resourcePat = null;
    public static boolean shouldGoHome = false;

    public static int evenChunkDx[] = {0, 4, -4, 1, 1};
    public static int evenChunkDy[] = {0, 0, 0, 3, -3};
    public static int oddChunkDx[] = {0, 4, -4, -1, -1};
    public static int oddChunkDy[] = {0, 0, 0, 3, -3};
    public static MapLocation chunkGoal = null;

    public static void init(RobotController rc) {
        Soldier.rc = rc;
        resourcePat = rc.getResourcePattern();
    }

    public static MapLocation getLowerCenter(MapLocation m) {
        int a = (m.y - 2) / 3;
        int cy = 3 * a + 2, cx;
        if (a % 2 == 0) {
            int b = (m.x - 2) / 4;
            cx = 2 + b * 4;
        }
        else {
            int b = (m.x - 3) / 4;
            cx = 3 + b * 4;
        }
        if (m.x - cx > 2) cx += 4;
        return new MapLocation(cx, cy);
    }

    public static boolean useOdd(MapLocation m) {
        return (((m.y - 2) / 3) & 1) == 1;
    }

    public static boolean shouldUseSecond(MapLocation m) {
        MapLocation c = getLowerCenter(m);
        int dx = m.x - c.x, dy = m.y - c.y;
        if(dx == 0 && dy == 0) return false;
        else return ((Math.abs(dx) & 1) == (Math.abs(dy) & 1));
    }

    public static boolean okToTile(MapLocation m) throws GameActionException {
        if (rc.getNumberTowers() == 25) return true;
        MapInfo mCur = rc.senseMapInfo(m);
        boolean b = shouldUseSecond(m);
        if (mCur.getPaint().isAlly()) {
            if (b == (mCur.getPaint() == PaintType.ALLY_SECONDARY)) {
                return false;
            }
        }
        for (int i = 3; --i >= -2; ){
            for (int j = 3; --j >= -2; ){
                if (i == 0 && j == 0) continue;
                MapLocation tmp = new MapLocation(m.x + i, m.y + j);
                if (rc.canSenseLocation(tmp)) {
                    MapInfo mi = rc.senseMapInfo(tmp);
                    if (mi.hasRuin()) {
                        RobotInfo r = rc.senseRobotAtLocation(tmp);
                        if (r == null) return false;
                    }
                }
            }
        }
        return true;
    }

    public static void checkMoneyPatterns() throws GameActionException {
        MapLocation h;
        MapLocation g = getLowerCenter(rc.getLocation());
        for (int i = 5; --i >= 0;) {
            if(useOdd(g)) h = new MapLocation(g.x + oddChunkDx[i], g.y + oddChunkDy[i]);
            else h = new MapLocation(g.x + evenChunkDx[i], g.y + evenChunkDy[i]); 
            if (rc.canCompleteResourcePattern(h)) {
                rc.completeResourcePattern(h);
                if (rc.canMark(h)) {
                    rc.mark(h, false);
                }
            }
        }
    }

    public static boolean canChangeColor(MapInfo mi) throws GameActionException {
        return (mi.getPaint().isAlly() || mi.getPaint() == PaintType.EMPTY);
    }

    public static boolean canChangeColor(MapLocation m) throws GameActionException {
        if (!rc.canSenseLocation(m)) return false;
        MapInfo mi = rc.senseMapInfo(m);
        return canChangeColor(mi);
    }

    public static MapLocation seeRuin() throws GameActionException {
        MapLocation best = null;
        int closest = 100000000;
        for (int i = near.length; --i >= 0; ) {
            if (near[i].hasRuin()) {
                MapLocation m = near[i].getMapLocation();
                RobotInfo r = rc.senseRobotAtLocation(m);
                if (r == null && seeIncompleteRuin(m)) {
                    int d = m.distanceSquaredTo(rc.getLocation());
                    if (d < closest) {
                        closest = d;
                        best = m;
                    }
                }
            }
        }
        return best;
    }

    public static void makeTower() throws GameActionException {
        assert(buildTower != null);

        UnitType t = Globals.getTowerToBuild();
        boolean[][] pattern = rc.getTowerPattern(t);

        MapLocation tmp;
        MapLocation goal = null;
        boolean secondCol = false;
        int bestDist = 1000000000;
        {% for i in range(2, -3, -1) %}
        {% for j in range(2, -3, -1) %}
        {% if i != 0 or j != 0 %}
        tmp = new MapLocation(buildTower.x + {{i}}, buildTower.y + {{j}});
        if (rc.canSenseLocation(tmp)) {
            MapInfo mi = rc.senseMapInfo(tmp);
            switch (mi.getPaint()) {
                case ENEMY_SECONDARY, ENEMY_PRIMARY -> {}
                default -> {
                    boolean isSecondary = (mi.getPaint() == PaintType.ALLY_SECONDARY);
                    boolean targetSecondary = pattern[{{i + 2}}][{{j + 2}}];
                    if ((mi.getPaint() == PaintType.EMPTY) || (isSecondary != targetSecondary)) {
                        int d = rc.getLocation().distanceSquaredTo(tmp);
                        if (d < bestDist) {
                            bestDist = d;
                            goal = tmp;
                            secondCol = targetSecondary;
                        }
                    }
                }
            }
        }
        {% endif %}
        {% endfor %}
        {% endfor %}

        if (goal != null) {
            Pathing.pathTo(goal);
            if (rc.canAttack(goal)) {
                rc.setIndicatorDot(goal, 255, 0, 0);
                rc.attack(goal, secondCol);
            }
        }
        else {
            if (rc.canCompleteTowerPattern(UnitType.LEVEL_ONE_PAINT_TOWER, buildTower)) {
                rc.completeTowerPattern(UnitType.LEVEL_ONE_PAINT_TOWER, buildTower);
            }
            if (rc.canCompleteTowerPattern(UnitType.LEVEL_ONE_MONEY_TOWER, buildTower)) {
                rc.completeTowerPattern(UnitType.LEVEL_ONE_MONEY_TOWER, buildTower);
            }
            Pathing.pathTo(buildTower);
        }
    }

    public static boolean visited(MapLocation m) throws GameActionException {
       switch (m.y) {
            {% for y in range(0, 60) -%}
            case {{ y }} -> {
                return ((TileLoader.visited{{ y }} >> m.x) & 1) == 1;
            }
            {% endfor -%}
        } 
        return false;
    }

    public static boolean shouldVisit(MapLocation m) throws GameActionException {
        if (!rc.canSenseLocation(m)) return false;
        boolean ok = false;
        for (int i = 2; --i >= -1;) {
            for (int j = 2; --j >= -1;) {
                MapLocation cur = new MapLocation(m.x + i, m.y + j);
                if (rc.canSenseLocation(cur)) {
                    MapInfo mi = rc.senseMapInfo(cur);
                    if (mi.getMark() != PaintType.EMPTY) return false;
                    if (!mi.isPassable()) return false;
                    if (mi.getPaint() == PaintType.EMPTY) ok = true;
                    else if (!mi.getPaint().isAlly()) return false;
                    boolean b = shouldUseSecond(cur);
                    if (b != (mi.getPaint() == PaintType.ALLY_SECONDARY)) {
                        ok = true;
                    }
                    if (cur == rc.getLocation()) continue;
                    RobotInfo r = rc.senseRobotAtLocation(cur);
                    if (r != null && r.getTeam() == rc.getTeam() && r.getType() == UnitType.SOLDIER) return false;
                }
            }
        }
        return (!visited(m) && ok); 
    }

    public static void moneyPattern() throws GameActionException {
        if (markedResource != null) return;
        if (ruinLoc != null && rc.getNumberTowers() < 25) return;
        if (rc.getPaint() < 50) return;

        if (chunkGoal == null) {
            int dist = 1000000000;
            MapLocation g = getLowerCenter(rc.getLocation());
            MapLocation h;
            ArrayList<Integer> p = new ArrayList<>();
            for (int i = 0; i <= 4; i++) p.add(i);
            Collections.shuffle(p);
            for (int i = 5; --i >= 0;) {
                if (useOdd(g)) h = new MapLocation(g.x + oddChunkDx[p.get(i)], g.y + oddChunkDy[p.get(i)]);
                else h = new MapLocation(g.x + evenChunkDx[p.get(i)], g.y + evenChunkDy[p.get(i)]);
                if (shouldVisit(h)) {
                    int d = rc.getLocation().distanceSquaredTo(h);
                    if (d < dist) {
                        dist = d;
                        chunkGoal = h;
                    }
                }
            }
        }

        if (chunkGoal != null) {
            if (!rc.getLocation().equals(chunkGoal)) {
                Pathing.pathTo(chunkGoal);
            }
        }
        else return;

        MapLocation c = getLowerCenter(rc.getLocation());
        if (!c.equals(rc.getLocation())) return;

        boolean bad = false;
        for (int i = 3; --i >= -2; ){
            if (bad) break;
            for (int j = 3; --j >= -2; ){
                MapLocation tmp = new MapLocation(rc.getLocation().x + i, rc.getLocation().y + j);
                if (rc.canSenseLocation(tmp)) {
                    MapInfo mi = rc.senseMapInfo(tmp);
                    if (mi.getMark() != PaintType.EMPTY) {
                        if (resourcePat[i + 2][j + 2] != (mi.getMark() == PaintType.ALLY_SECONDARY)) {
                            bad = true;
                            break;
                        }
                    }
                    if (!mi.isPassable()) {
                        bad = true;
                        break;
                    }
                    RobotInfo r = rc.senseRobotAtLocation(tmp);
                    if (r != null && Globals.isTower(r.getType())) {
                        bad = true;
                        break;
                    }
                }
                else {
                    bad = true;
                    break;
                }
            }
        }
        if (!bad) {
            //i think this check can probably be removed...
            if (rc.canMarkResourcePattern(rc.getLocation())) {
                markedResource = rc.getLocation();
                chunkGoal = null;
            }
        }
        else {
            chunkGoal = null;
        }
    }

    public static void makeResourcePatch() throws GameActionException {
        Pathing.pathTo(markedResource);
        MapLocation goal = null;
        int bestDist = 1000000000;
        boolean secondCol = false;
        for (int i = 3; --i >= -2; ){
            for (int j = 3; --j >= -2; ){
                if (i == 0 && j == 0) continue;
                MapLocation tmp = new MapLocation(markedResource.x + i, markedResource.y + j);
                if (rc.canSenseLocation(tmp)) {
                    MapInfo mi = rc.senseMapInfo(tmp);
                    if (canChangeColor(mi)) {
                        boolean b = shouldUseSecond(tmp);
                        if (mi.getPaint().isAlly()) {
                            if (b == (mi.getPaint() == PaintType.ALLY_SECONDARY)) {
                                continue;
                            }
                        }
                        int d = rc.getLocation().distanceSquaredTo(tmp);
                        if (d < bestDist) {
                            bestDist = d;
                            goal = tmp;
                            secondCol = b;
                        }
                    }
                }
            }
        }
        if (goal != null) {
            if (rc.canAttack(goal)) {
                rc.attack(goal, secondCol);
            }
            if (rc.canCompleteResourcePattern(markedResource)) {
                rc.completeResourcePattern(markedResource);
                markedResource = null;
            }
        }
        else {
            if (rc.canCompleteResourcePattern(markedResource)) {
                rc.completeResourcePattern(markedResource);
            }
            markedResource = null;
        }
    }

    public static boolean seeIncompleteRuin(MapLocation ruin) throws GameActionException {
        MapLocation tmp;
        UnitType t = Globals.getTowerToBuild();
        boolean[][] pattern = rc.getTowerPattern(t);
        RobotInfo tower = rc.senseRobotAtLocation(ruin);
        boolean needsChanges = (tower == null);
        // This should never trigger. Just here for completeness.
        if (tower != null && tower.team != rc.getTeam()) return false;
        {% for i in range(2, -3, -1) %}
        {% for j in range(2, -3, -1) %}
        {% if i != 0 or j != 0 %}
        tmp = new MapLocation(ruin.x + {{i}}, ruin.y + {{j}});
        if (rc.canSenseLocation(tmp)) {
            MapInfo mi = rc.senseMapInfo(tmp);
            switch (mi.getPaint()) {
                case ENEMY_SECONDARY, ENEMY_PRIMARY: return false;
                default: {
                    boolean isSecondary = (mi.getPaint() == PaintType.ALLY_SECONDARY);
                    boolean targetSecondary = pattern[{{i + 2}}][{{j + 2}}];
                    if ((mi.getPaint() == PaintType.EMPTY) || (isSecondary != targetSecondary)) {
                        needsChanges = true;
                    }
                }
            }
        }
        {% endif %}
        {% endfor %}
        {% endfor %}
        return needsChanges;
    }


    public static void run() throws GameActionException {
        initTurn();
        runTurn();
        postTurn();
    }

    public static void initTurn() throws GameActionException {
        near = rc.senseNearbyMapInfos();
        myloc = rc.getLocation();
        myPaint = rc.getPaint();

        RefuelManager.setHome();
        boolean lowHealth = (myPaint <= (paintCapacity >> 2));
        if (lowHealth != shouldGoHome) {
            shouldGoHome = lowHealth;
            RefuelManager.reset();
        }
    }
    
    public static void runTurn() throws GameActionException {
        if (shouldGoHome) {
            rc.setIndicatorString("Refueling");
            RefuelManager.refuel();
            return;
        } else if (Attack.shouldSoldierMicro()) {
            rc.setIndicatorString("Attacking");
            Attack.soldierAttackMicro();
            return;
        } else if (rc.getNumberTowers() < 25 && markedResource == null) {
            buildTower = null;
            ruinLoc = seeRuin();
            if (ruinLoc != null) {
                buildTower = ruinLoc;
                rc.setIndicatorString("Building a tower + (" + buildTower.x + ", " + buildTower.y + ")");
                makeTower();
                return;
            }
        }

        moneyPattern();
        if (markedResource != null) {
            rc.setIndicatorString("Patching Resource");
            makeResourcePatch();
            return;
        } else {
            rc.setIndicatorString("Exploring");
            Explore.explore(near);
            return;
        }        
    }

    public static void postTurn() throws GameActionException {

        // Lay paint where I am first.
        if (canChangeColor(myloc) && rc.canAttack(myloc) && okToTile(myloc) && rc.getPaint() >= 50){
            rc.attack(myloc, shouldUseSecond(myloc));
        }

        if (buildTower != null) {
            rc.setIndicatorString("Attempting to complete tower!");
            if (rc.canCompleteTowerPattern(UnitType.LEVEL_ONE_PAINT_TOWER, buildTower)) {
                rc.completeTowerPattern(UnitType.LEVEL_ONE_PAINT_TOWER, buildTower);
            }
            if (rc.canCompleteTowerPattern(UnitType.LEVEL_ONE_MONEY_TOWER, buildTower)) {
                rc.completeTowerPattern(UnitType.LEVEL_ONE_MONEY_TOWER, buildTower);
            }
        }
        checkMoneyPatterns();
    }
}