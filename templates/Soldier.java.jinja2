{% import 'helpers/Utils.java.jinja2' as utils %}

package current;
import battlecode.common.*;

public class Soldier {
    public static RobotController rc;
    public static MapLocation home = null;
    public static MapLocation buildTower = null;
    public static MapLocation myloc;
    public static int paintCapacity = UnitType.SOLDIER.paintCapacity;
    public static int myPaint;
    public static MapLocation exploreTarget;
    public static void init(RobotController rc) {
        Soldier.rc = rc;
    }

    public static void setHome() throws GameActionException {
        RobotInfo[] robots = rc.senseNearbyRobots();
        for (int i = robots.length; --i >= 0; ) {
            RobotInfo robot = robots[i];
            if (robot.team != rc.getTeam() || robot.type == UnitType.LEVEL_ONE_MONEY_TOWER) continue;
            switch (robot.type) {
                case SOLDIER: continue;
                case MOPPER: continue;
                case SPLASHER: continue;
                default:
                    home = robot.location;
                    break;
            }
        }
    }

    public static void refuel() throws GameActionException {
        rc.setIndicatorString("Refueling");
        Pathing.pathTo(home);
        int amt = myPaint - paintCapacity;
        if (rc.canTransferPaint(home, amt)) {
            rc.transferPaint(home, amt);
        }
    }

    public static boolean seeRuin() throws GameActionException {
        MapInfo[] near = rc.senseNearbyMapInfos();
        for (int i = near.length; --i >= 0; ) {
            if (near[i].hasRuin()) {
                RobotInfo r = rc.senseRobotAtLocation(near[i].getMapLocation());
                if (r == null) {
                    if (buildTower == null) {
                        buildTower = near[i].getMapLocation();
                    }
                    return true;
                }
            }
        }
        return false;
    }

    public static void makeTower() throws GameActionException {
        assert(buildTower != null);

        UnitType t = UnitType.LEVEL_ONE_PAINT_TOWER;
        MapLocation check = buildTower.add(Direction.NORTH);
        if (rc.canSenseLocation(check) && rc.senseMapInfo(check).getMark() == PaintType.EMPTY && rc.canMarkTowerPattern(t, buildTower)){
            rc.markTowerPattern(t, buildTower);
        }

        MapLocation goal = null;
        boolean secondCol = false;
        int bestDist = 1000000000;

        for (int i = 3; --i >= -2; ){
            for (int j = 3; --j >= -2; ){
                if (i == 0 && j == 0) continue;
                MapLocation tmp = new MapLocation(buildTower.x + i, buildTower.y + j);
                if (rc.canSenseLocation(tmp)) {
                    MapInfo mi = rc.senseMapInfo(tmp);
                    if (mi.getMark() != mi.getPaint() && mi.getMark() != PaintType.EMPTY) {
                        int d = rc.getLocation().distanceSquaredTo(tmp);
                        if (d < bestDist) {
                            bestDist = d;
                            goal = tmp;
                            secondCol = mi.getMark() == PaintType.ALLY_SECONDARY;
                        }
                    }
                }
            }
        }
        if (goal != null) {
            if (rc.canAttack(goal)) {
                rc.attack(goal, secondCol);
            }
            else {
                Pathing.pathTo(goal);
            }
        }
        else {
            if (rc.canCompleteTowerPattern(t, buildTower)){
                rc.completeTowerPattern(t, buildTower);
            }
            Pathing.pathTo(buildTower);
        }
    }

    public static boolean isBuilt(MapLocation ruinLoc) throws GameActionException {
        if (rc.canSenseLocation(ruinLoc)) {
            RobotInfo r = rc.senseRobotAtLocation(ruinLoc);
            return (r != null);
        }
        return false;
    }

    public static void explore() throws GameActionException {
        if (exploreTarget == null || rc.getLocation().distanceSquaredTo(exploreTarget) <= 5) {
            exploreTarget = new MapLocation(
                Globals.rng.nextInt(rc.getMapWidth()),
                Globals.rng.nextInt(rc.getMapHeight())
            );
        }
        rc.setIndicatorString("Exploring to " + exploreTarget.x + " " + exploreTarget.y);
        Pathing.pathTo(exploreTarget);
    }

    public static void run() throws GameActionException {
        // We do this every turn in the event the tower got destroyed when the unit was created.
        setHome();

        if (buildTower != null && isBuilt(buildTower)) {
            buildTower = null;
            return;
        }

        myloc = rc.getLocation();
        myPaint = rc.getPaint();

        if (myPaint <= (paintCapacity >> 1) && home != null) {
            refuel();
        }
        else if (seeRuin() || buildTower != null) {
            makeTower();
        }
        else {
            explore();
        }
        

        // Lay paint where I am first.
        MapInfo currentTile = rc.senseMapInfo(myloc);
        if (!currentTile.getPaint().isAlly() && rc.canAttack(myloc)){
            rc.attack(myloc);
        }

        // Paint around me.
        {# MapLocation nextLoc;
        MapInfo nextLocInfo;
        RobotInfo unitInfo;
        loop: {
        {%- for direction in directions %}
            nextLoc = myloc.add({{ direction }});
            nextLocInfo = rc.senseMapInfo(nextLoc);
            if (rc.canAttack(nextLoc) && !nextLocInfo.getPaint().isAlly()) {
                rc.attack(nextLoc);
                break loop;
            }
        {% endfor -%}
        } #}
    }
}