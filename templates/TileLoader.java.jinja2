package current;
import battlecode.common.*;

public class TileLoader {
    public static RobotController rc;
    public static MapLocation[] seenRuins;
    public static int maxRuinNum = 0;
    public static void init(RobotController rc) {
        TileLoader.rc = rc;
        seenRuins = new MapLocation[50];
    }

    {%- set VISION_WIDTH = 9 -%}
    {%- set CORNER_OFFSET = intDiv(VISION_WIDTH, 2) -%}
    {%- set bitFmt = '{:09b}' %}

    {% for i in range(60) -%}
    public static long seen{{ i }} = 0;
    public static long wall{{ i }} = 0;
    public static long ruin{{ i }} = 0;
    public static long bad_ruin{{ i }} = 0;
    public static long visited{{ i }} = 0;

    public static long seen_reversed{{ i }} = 0;
    public static long wall_reversed{{ i }} = 0;
    public static long ruin_reversed{{ i }} = 0;
    {% endfor -%}

    public static int offset;
    public static MapInfo[] mapInfos;
    public static int shiftReversedX;

    // TODO: it's actually better to use the _reversed mask
    // Because then you can check V, H, and R...
    // But I've been working on this too long.
    {% for i in range(VISION_WIDTH) -%}
    public static int local_ruin{{ i }} = 0;
    public static int local_seen{{ i }} = 0;
    public static int local_seen_reversed{{ i }} = 0;
    public static int local_wall{{ i }} = 0;
    public static int local_wall_reversed{{ i }} = 0;
    {% endfor %}

    public static void load() throws GameActionException {
        loadRuins();
        loadWalls();
        markVisited();
    }

    public static void markVisited() throws GameActionException {
        MapLocation m = rc.getLocation();
        switch (m.y) {
            {% for y in range(0, 60) -%}
            case {{ y }} -> {
                visited{{ y }} |= 1L << m.x;
                return;
            }
            {% endfor -%}
        } 
    }

    public static boolean badRuin(MapLocation ruin) throws GameActionException {
        switch (ruin.y) {
            {% for y in range(0, 60) -%}
            case {{ y }} -> {
                return ((bad_ruin{{ y }} >> ruin.x) & 1) == 1;
            }
            {% endfor -%}
        } 
        return false;
    }

    public static void markBad(MapLocation ruin) throws GameActionException {
        switch (ruin.y) {
            {% for y in range(0, 60) -%}
            case {{ y }} -> {
                bad_ruin{{ y }} |= 1L << ruin.x;
                break;
            }
            {% endfor -%}
        } 
        for (int j = maxRuinNum; --j >= 0;) {
            if (seenRuins[j] != null && seenRuins[j].equals(ruin)) {
                seenRuins[j] = null;
            }
        }
    }

    // Pretty cheap, there are no ruins within a 5x5 of other ruins.
    public static void loadRuins() throws GameActionException {
        {% for i in range(9) %}
        local_ruin{{ i }} = 0;
        {% endfor %}

        int myY = rc.getLocation().y;
        int myX = rc.getLocation().x;
        long lastSquare = (1L << (rc.getMapWidth() - 1));
        MapLocation[] ruins = rc.senseNearbyRuins(-1);
        for (int i = ruins.length; --i >= 0; ) {
            MapLocation ruin = ruins[i];
            RobotInfo r = rc.senseRobotAtLocation(ruin);
            if (r == null && !badRuin(ruin)) {
                //ok we can look through our list and if it is not there, add it to the first open spot?
                int lst = maxRuinNum;
                for (int j = maxRuinNum; --j >= 0;) {
                    if (seenRuins[j] != null && seenRuins[j].equals(ruin)) {
                        lst = -1;
                        break;
                    }
                    if(seenRuins[j] == null) lst = j;
                }
                if (lst == maxRuinNum && maxRuinNum != 50) {
                    seenRuins[maxRuinNum] = ruin;
                    maxRuinNum++;
                }
                else if (lst != -1) seenRuins[lst] = ruin;
            }
            else {
                //potentially remove from our list
                for (int j = maxRuinNum; --j >= 0;) {
                    if (seenRuins[j] != null && seenRuins[j].equals(ruin)) {
                        seenRuins[j] = null;
                    }
                }
            }
            switch (ruin.y) {
            {% for y in range(60) -%}
                case {{ y }} -> {
                    ruin{{ y }} |= (1L << ruin.x);
                    ruin_reversed{{ y }} |= (lastSquare >> ruin.x);
                }
            {% endfor %}
                default -> System.out.println("Invalid Ruin Y");
            }
            switch (ruin.y - (myY - {{CORNER_OFFSET}})) {
            {% for y in range(9) -%}
                case {{ y }} -> {
                    local_ruin{{ y }} += (1 << (ruin.x - (myX - {{CORNER_OFFSET}})));
                }
            {% endfor %}
                default -> System.out.println("Invalid Ruin Y");
            }
        }
    }

    public static void loadWalls() throws GameActionException {
        // We measure from the top right corner since that will always 
        // Have non-negative coordinates, meaning this hashCode magic will make sense.
        offset = rc.getLocation().translate({{CORNER_OFFSET}}, {{CORNER_OFFSET}}).hashCode();
        mapInfos = rc.senseNearbyMapInfos();

        // The seen masks are known statically.
        local_seen8 = 0b001111100;
        local_seen7 = 0b011111110;
        local_seen6 = 0b111111111;
        local_seen5 = 0b111111111;
        local_seen4 = 0b111111111;
        local_seen3 = 0b111111111;
        local_seen2 = 0b111111111;
        local_seen1 = 0b011111110;
        local_seen0 = 0b001111100;
        local_seen_reversed8 = 0b001111100;
        local_seen_reversed7 = 0b011111110;
        local_seen_reversed6 = 0b111111111;
        local_seen_reversed5 = 0b111111111;
        local_seen_reversed4 = 0b111111111;
        local_seen_reversed3 = 0b111111111;
        local_seen_reversed2 = 0b111111111;
        local_seen_reversed1 = 0b011111110;
        local_seen_reversed0 = 0b001111100;

        {% for i in range(VISION_WIDTH) -%}
        local_wall{{ i }} = 0;
        local_wall_reversed{{ i }} = 0;
        {% endfor %}

        for (int i = mapInfos.length; --i >= 0; ) {
            // We choose to unroll the below instead of the outer loop because it has a much more significant effect.
            // Storing something in a mask becomes a single integer increment instruction.
            // https://github.com/battlecode/battlecode24/blob/master/engine/src/main/battlecode/common/MapLocation.java
            MapInfo mapInfo = mapInfos[i];
            if (mapInfo.isWall()) {
                switch (offset - mapInfo.getMapLocation().hashCode()) {
                    {% for rx in range(VISION_WIDTH) -%}
                    {% for ry in range(VISION_WIDTH) -%}
                    {%- set x = VISION_WIDTH - 1 - rx -%}
                    {%- set y = VISION_WIDTH - 1 - ry -%}
                    case 0x{{ '{:08X}'.format(bitOr(ry, bitLeftShift(rx, 16))) }} -> {
                        local_wall{{ y }}          += 0b{{ bitFmt.format(bitLeftShift(1, x)) }};
                        local_wall_reversed{{ y }} += 0b{{ bitFmt.format(bitLeftShift(1, rx)) }};
                    }
                    {% endfor -%}
                    {%- endfor -%}
                    default -> System.out.println("Unknown MapLocation Offset");
                }
            }
        }

        // Dump the local masks into the actual masks.
        shiftReversedX = ((rc.getMapWidth() - 1) - (rc.getLocation().x + {{ CORNER_OFFSET }}));
        if (shiftReversedX > 0) {
            dumpPositive();
        } else {
            dumpNegative();
        }
    }

    {% macro dump(type) %}
    public static void dump{{ type }}() throws GameActionException {
        long rowMask = (1L << rc.getMapWidth()) - 1;
        int cornerY = rc.getLocation().y + {{CORNER_OFFSET}};
        int shiftX = rc.getLocation().x + {{CORNER_OFFSET - (VISION_WIDTH - 1)}};
        {% if type != 'Positive' -%}
        int trueReversedShiftX = -shiftReversedX;
        {%- set shift = '>>> trueReversedShiftX' -%}
        {%- else -%}
        {%- set shift = '<< shiftReversedX' -%}
        {%- endif %}

        switch (cornerY) {
            {% for y in range(CORNER_OFFSET, 60 + CORNER_OFFSET) -%}
            case {{ y }} -> {
                {% for offset in range(0, VISION_WIDTH) -%}
                {%- set globalY = y - offset -%}
                {%- set localY = VISION_WIDTH - 1 - offset -%}
                {%- if (globalY >= 0 and globalY < 60) -%}
                seen{{globalY}} |= ((long)(local_seen{{localY}}) << shiftX) & rowMask;
                seen_reversed{{globalY}} |= ((long)(local_seen_reversed{{localY}}) {{ shift }}) & rowMask;
                wall{{globalY}} |= (long)(local_wall{{localY}}) << shiftX;
                wall_reversed{{globalY}} |= (long)(local_wall_reversed{{localY}}) {{ shift }};
                {% endif -%}
                {%- endfor %}
            }
            {% endfor -%}
            default -> System.out.println("Top Right Corner Out of Bounds.");
        }
    }
    {% endmacro %}

    {{ dump(type='Positive') }}
    {{ dump(type='Negative') }}
    
    {# This is faster, but massive. #}
    {% if not prod %}
    {% set LIMIT = 6 %}
    public static void display() throws GameActionException {
        System.out.println("I'm displaying!");
        {% for i in range(LIMIT) %}
        display{{i}}();
        {% endfor %}
    }

    {% macro display(index, limit) %}
    public static void display{{index}}() throws GameActionException {
        {% set mask = 'ruin' %}
        {% for y in range(intDiv(60, limit) * index, intDiv(60, limit) * (index + 1)) -%}
        if ({{mask}}{{ y }} != 0) {
            switch (rc.getMapWidth()) {
                {% for x in range(60, -1, -1) %}
                case {{ x }}: {
                    if (({{mask}}{{ y }} & 0x{{ '{:08X}'.format(bitLeftShift(1, x)) }}L) != 0) {
                        rc.setIndicatorDot(new MapLocation({{ x }}, {{ y }}), 0, 0, 0);
                    }
                }
                {%- endfor %}
            }
        }
        {%- endfor %}
    }
    {% endmacro %}

    {% for i in range(LIMIT) %}
    {{ display(i, LIMIT) }}
    {% endfor %}
    {% endif %}
}