package current;
import battlecode.common.*;

public class TileLoader {
    public static RobotController rc;
    public static void init(RobotController rc) {
        TileLoader.rc = rc;
    }

    {%- set VISION_WIDTH = 9 -%}
    {%- set CORNER_OFFSET = intDiv(VISION_WIDTH, 2) -%}
    {%- set bitFmt = '{:09b}' %}

    {% for i in range(60) -%}
    public static long seen{{ i }} = 0;
    public static long wall{{ i }} = 0;
    public static long ruin{{ i }} = 0;

    public static long seen_column{{ i }} = 0;
    public static long wall_column{{ i }} = 0;
    public static long ruin_column{{ i }} = 0;
    {% endfor -%}

    public static int offset;
    public static MapInfo[] mapInfos;
    public static int shiftReversedX;

    // TODO: it's actually better to use the _reversed mask
    // Because then you can check V, H, and R...
    // But I've been working on this too long.
    {% for i in range(VISION_WIDTH) -%}
    public static int local_seen{{ i }} = 0;
    public static int local_seen_column{{ i }} = 0;
    public static int local_wall{{ i }} = 0;
    public static int local_wall_column{{ i }} = 0;
    {% endfor %}

    public static void load() throws GameActionException {
        loadRuins();
        loadWalls();
    }

    public static void loadRuins() throws GameActionException {
        // Pretty cheap, there are no ruins within a 5x5 of other ruins.
        long lastSquare = (1L << (rc.getMapWidth() - 1));
        MapLocation[] ruins = rc.senseNearbyRuins(-1);
        for (int i = ruins.length; --i >= 0; ) {
            MapLocation ruin = ruins[i];
            long rx = (1L << ruin.x);
            long ry = (1L << ruin.y);
            long revx = (lastSquare >> ruin.x);
            switch (ruin.y) {
            {% for y in range(60) -%}
                case {{ y }} -> {
                    ruin{{ y }} |= rx;
                    if ((SymmetryChecker.getSeenHorizontal({{ y }}) & revx) != 0) {
                        if ((SymmetryChecker.getRuinHorizontal({{ y }}) & revx) == 0) {
                            SymmetryChecker.RSYM = 0;
                        }
                    }
                }
            {% endfor %}
                default -> System.out.println("Invalid Ruin Y");
            }
        
            switch (ruin.x) {
            {% for x in range(60) -%}
                case {{ x }} -> ruin_column{{ x }} |= ry;
            {% endfor %}
                default -> System.out.println("Invalid Ruin X");
            }
        }
    }

    public static void loadWalls() throws GameActionException {
        System.out.println("I'm loading!");
        // We measure from the top right corner since that will always 
        // Have non-negative coordinates, meaning this hashCode magic will make sense.
        offset = rc.getLocation().translate({{CORNER_OFFSET}}, {{CORNER_OFFSET}}).hashCode();
        mapInfos = rc.senseNearbyMapInfos();

        // The seen masks are known statically.
        local_seen8 = 0b001111100;
        local_seen7 = 0b011111110;
        local_seen6 = 0b111111111;
        local_seen5 = 0b111111111;
        local_seen4 = 0b111111111;
        local_seen3 = 0b111111111;
        local_seen2 = 0b111111111;
        local_seen1 = 0b011111110;
        local_seen0 = 0b001111100;
        local_seen_column8 = 0b001111100;
        local_seen_column7 = 0b011111110;
        local_seen_column6 = 0b111111111;
        local_seen_column5 = 0b111111111;
        local_seen_column4 = 0b111111111;
        local_seen_column3 = 0b111111111;
        local_seen_column2 = 0b111111111;
        local_seen_column1 = 0b011111110;
        local_seen_column0 = 0b001111100;

        {% for i in range(VISION_WIDTH) -%}
        local_wall{{ i }} = 0;
        local_wall_column{{ i }} = 0;
        {% endfor %}

        for (int i = mapInfos.length; --i >= 0; ) {
            // We choose to unroll the below instead of the outer loop because it has a much more significant effect.
            // Storing something in a mask becomes a single integer increment instruction.
            // https://github.com/battlecode/battlecode24/blob/master/engine/src/main/battlecode/common/MapLocation.java
            MapInfo mapInfo = mapInfos[i];
            if (mapInfo.isWall()) {
                switch (offset - mapInfo.getMapLocation().hashCode()) {
                    {% for rx in range(VISION_WIDTH) -%}
                    {% for ry in range(VISION_WIDTH) -%}
                    {%- set x = VISION_WIDTH - 1 - rx -%}
                    {%- set y = VISION_WIDTH - 1 - ry -%}
                    case 0x{{ '{:08X}'.format(bitOr(ry, bitLeftShift(rx, 16))) }} -> {
                        local_wall{{ y }}          += 0b{{ bitFmt.format(bitLeftShift(1, x)) }};
                        local_wall_column{{ x }}   += 0b{{ bitFmt.format(bitLeftShift(1, y)) }};
                    }
                    {% endfor -%}
                    {%- endfor -%}
                    default -> System.out.println("Unknown MapLocation Offset");
                }
            }
        }

        // Dump the local masks into the actual masks.
        MapLocation myloc = rc.getLocation();
        long rowMask = (1L << rc.getMapWidth()) - 1;
        int cornerY = myloc.y + {{CORNER_OFFSET}};
        int shiftX = myloc.x + {{CORNER_OFFSET - (VISION_WIDTH - 1)}};
        switch (cornerY) {
            {% for y in range(CORNER_OFFSET, 60 + CORNER_OFFSET) -%}
            case {{ y }} -> {
                {% for offset in range(0, VISION_WIDTH) -%}
                {%- set globalY = y - offset -%}
                {%- set localY = VISION_WIDTH - 1 - offset -%}
                {%- if (globalY >= 0 and globalY < 60) -%}
                seen{{globalY}} |= ((long)(local_seen{{localY}}) << shiftX) & rowMask;
                wall{{globalY}} |= (long)(local_wall{{localY}}) << shiftX;
                {% endif -%}
                {%- endfor %}
            }
            {% endfor -%}
            default -> System.out.println("Top Right Corner Out of Bounds.");
        }

        long colMask = (1L << rc.getMapHeight()) - 1;
        int cornerX = myloc.x + {{CORNER_OFFSET}};
        int shiftY = myloc.y + {{CORNER_OFFSET - (VISION_WIDTH - 1)}};
        switch (cornerX) {
            {% for x in range(CORNER_OFFSET, 60 + CORNER_OFFSET) -%}
            case {{ x }} -> {
                {% for offset in range(0, VISION_WIDTH) -%}
                {%- set globalX = x - offset -%}
                {%- set localX = VISION_WIDTH - 1 - offset -%}
                {%- if (globalX >= 0 and globalX < 60) -%}
                seen_column{{globalX}} |= ((long)(local_seen_column{{localX}}) << shiftY) & colMask;
                wall_column{{globalX}} |= (long)(local_wall_column{{localX}}) << shiftY;
                {% endif -%}
                {%- endfor %}
            }
            {% endfor -%}
            default -> System.out.println("Top Right Corner Out of Bounds.");
        }
    }
    
    {# This is faster, but massive. #}
    {% if not prod %}
    {% set LIMIT = 6 %}
    public static void display() throws GameActionException {
        System.out.println("I'm displaying!");
        {% for i in range(LIMIT) %}
        display{{i}}();
        {% endfor %}
    }

    {% macro display(index, limit) %}
    public static void display{{index}}() throws GameActionException {
        {% set mask = 'ruin' %}
        {% for y in range(intDiv(60, limit) * index, intDiv(60, limit) * (index + 1)) -%}
        if ({{mask}}{{ y }} != 0) {
            switch (rc.getMapWidth()) {
                {% for x in range(60, -1, -1) %}
                case {{ x }}: {
                    if (({{mask}}{{ y }} & 0x{{ '{:08X}'.format(bitLeftShift(1, x)) }}L) != 0) {
                        rc.setIndicatorDot(new MapLocation({{ x }}, {{ y }}), 0, 0, 0);
                    }
                }
                {%- endfor %}
            }
        }
        {%- endfor %}
    }
    {% endmacro %}

    {% for i in range(LIMIT) %}
    {{ display(i, LIMIT) }}
    {% endfor %}
    {% endif %}
}