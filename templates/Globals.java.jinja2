package current;
import java.util.Random;
import battlecode.common.*;

public class Globals {
    public static int born;
    public static int roundNum;
    public static RobotController rc;
    public static final Random rng = new Random();
    public static boolean[][] moneyTower;
    public static boolean[][] paintTower;
    public static void init(RobotController rc) throws GameActionException {
        rng.setSeed((long) rc.getID());
        Globals.rc = rc;
        moneyTower = rc.getTowerPattern(UnitType.LEVEL_ONE_MONEY_TOWER);
        paintTower = rc.getTowerPattern(UnitType.LEVEL_ONE_PAINT_TOWER);
        born = rc.getRoundNum();
    }

    public static void run() throws GameActionException {
        roundNum = rc.getRoundNum();
        updateTowerTracker();
    }

    public static boolean onMap(MapLocation loc) throws GameActionException {
        return (loc.x >= 0 && loc.y >= 0 && loc.x < rc.getMapWidth() && loc.y < rc.getMapHeight());
    }

    public static UnitType getTowerToBuild(MapLocation loc) throws GameActionException {
        MapLocation paintMark = loc.add(Direction.WEST);
        MapLocation moneyMark = loc.add(Direction.SOUTH);
        if (rc.canSenseLocation(paintMark)){
            MapInfo s = rc.senseMapInfo(paintMark);
            if (s.getMark() == PaintType.ALLY_SECONDARY) return UnitType.LEVEL_ONE_PAINT_TOWER;
        }
        if( rc.canSenseLocation(moneyMark)) {
            MapInfo s = rc.senseMapInfo(moneyMark);
            if (s.getMark() == PaintType.ALLY_SECONDARY) return UnitType.LEVEL_ONE_MONEY_TOWER;
        }
        if (numPaintTowers == 0) return UnitType.LEVEL_ONE_PAINT_TOWER;
        else if (rc.getMoney() < 2000) return UnitType.LEVEL_ONE_MONEY_TOWER;
        return UnitType.LEVEL_ONE_PAINT_TOWER;
    }

    public static boolean isTower(UnitType u) {
        return switch (u) {
            case SOLDIER -> false;
            case SPLASHER -> false;
            case MOPPER -> false;
            default -> true;
        };
    }

    public static int numSrps = 0;
    public static int numMoneyTowers = 1;
    public static int numPaintTowers = 1;
    {% set WINDOW_LENGTH = 10 %}
    {% for i in range(WINDOW_LENGTH) %}
    public static int income{{i}} = 0;
    public static int numTowers{{i}} = 0;
    {% endfor %}
    public static int lastMoney = GameConstants.INITIAL_TEAM_MONEY;
    public static void updateTowerTracker() throws GameActionException {
        int currentMoney = rc.getMoney();
        int currentIncome = (currentMoney - lastMoney);
        switch (roundNum % {{WINDOW_LENGTH}}) {
            {% for i in range(WINDOW_LENGTH) %}
            case {{i}} -> {
                income{{i}} = currentIncome;
                numTowers{{i}} = rc.getNumberTowers();
            }
            {% endfor %}
            default -> {}
        }
        lastMoney = currentMoney;
        
        int numTowers = 0;
        int highestIncome = -1000000;
        {% for i in range(WINDOW_LENGTH) %}
        if (income{{i}} > highestIncome) {
            highestIncome = income{{i}};
            numTowers = numTowers{{i}};
        }
        {% endfor %}
        if (highestIncome < 0) return;

        switchLabel: switch (highestIncome) {
            {% for income, pairs in computeIncomeMap(maxSrps=25, maxMoneyTowers=25).items() %}
            case {{income}} -> {
                {% for (moneyTowers, srps) in pairs %}
                if ({{ moneyTowers }} <= numTowers) {
                    numSrps = {{ srps }};
                    numMoneyTowers = {{ moneyTowers }};
                    break switchLabel;
                }
                {% endfor %}
            }
            {% endfor %}
            default -> {
                return;
            }
        }
        numPaintTowers = numTowers - numMoneyTowers;
    }
}