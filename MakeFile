TEMPLATE_DIR := templates
HELPERS_DIR := helpers
OUTPUT_DIR := java/src/current

# Python script for processing
JINJA_SCRIPT := jinja.py

# Python script for testing
MODAL_SCRIPT := test/modal_tester.py

# Find all .java.jinja2 files in the template directory
TEMPLATES := $(wildcard $(TEMPLATE_DIR)/*.java.jinja2)

# Define corresponding output .java files in the output directory
OUTPUTS := $(patsubst $(TEMPLATE_DIR)/%.java.jinja2, $(OUTPUT_DIR)/%.java, $(TEMPLATES))

HELPER_FILES := $(wildcard $(HELPERS_DIR)/*)

# DEPS includes the Python script and all helper files
DEPS := $(JINJA_SCRIPT) $(HELPER_FILES)

# Default mode (debug)
MODE := False

# Default target
all: $(OUTPUTS)

# Prod target
prod: MODE := True
prod: $(OUTPUTS)

# Rule to generate .java files
$(OUTPUT_DIR)/%.java: $(TEMPLATE_DIR)/%.java.jinja2 $(DEPS)
	mkdir -p $(OUTPUT_DIR)
	rm -f $@
	uv run $(JINJA_SCRIPT) --input $< --output $@ --prod $(MODE)
	chmod 444 $@

test: all
	uv run modal run $(MODAL_SCRIPT) --team1=current --team2=$(BASELINE)

pullMatches:
	uv run modal volume get battlecode-vol / test/matches --force

clone: all
	sh clone.sh $(BASELINE)

zip: all
	cd java && ./gradlew zipForSubmit

clean:
	rm -rf $(OUTPUT_DIR)